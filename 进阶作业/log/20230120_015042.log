2023-01-20 01:50:42,955 - mmseg - INFO - Multi-processing start method is `None`
2023-01-20 01:50:42,956 - mmseg - INFO - OpenCV num_threads is `40
2023-01-20 01:50:43,031 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
CUDA available: True
GPU 0: GeForce RTX 3090
CUDA_HOME: /usr/local/cuda-11.1
NVCC: Cuda compilation tools, release 11.1, V11.1.74
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.8.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0+cu111
OpenCV: 4.5.5
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMSegmentation: 0.29.1+9625c9b
------------------------------------------------------------

2023-01-20 01:50:43,032 - mmseg - INFO - Distributed training: False
2023-01-20 01:50:43,330 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet101_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='DepthwiseSeparableASPPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        dilations=(1, 12, 24, 36),
        c1_in_channels=256,
        c1_channels=48,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = '/media/ders/mazhiming/datasets/VOC2012/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=1,
    train=dict(
        type='PascalVOCDataset',
        data_root='/media/ders/mazhiming/datasets/VOC2012/',
        img_dir='JPEGImages',
        ann_dir='pseudo_seg_labels',
        split='ImageSets/Segmentation/aug.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalVOCDataset',
        data_root='/media/ders/mazhiming/datasets/VOC2012/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassAug',
        split='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalVOCDataset',
        data_root='/media/ders/mazhiming/datasets/VOC2012/',
        img_dir='JPEGImages',
        ann_dir='SegmentationClassAug',
        split='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=15000)
checkpoint_config = dict(by_epoch=False, interval=3000)
evaluation = dict(interval=3000, metric='mIoU', pre_eval=True)
gpu_ids = [0]
auto_resume = False
work_dir = 'mzmseg/baseline_splgpse'

2023-01-20 01:50:43,330 - mmseg - INFO - Set random seed to 0, deterministic: False
2023-01-20 01:50:45,150 - mmseg - INFO - initialize ResNetV1c with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
2023-01-20 01:50:45,369 - mmseg - INFO - initialize DepthwiseSeparableASPPHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2023-01-20 01:50:45,505 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet101_v1c 

decode_head.conv_seg.weight - torch.Size([21, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.image_pool.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.image_pool.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.conv.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.depthwise_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.1.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.conv.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.depthwise_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.2.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.conv.weight - torch.Size([2048, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.depthwise_conv.bn.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.aspp_modules.3.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 2560, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.c1_bottleneck.conv.weight - torch.Size([48, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.c1_bottleneck.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.c1_bottleneck.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.conv.weight - torch.Size([560, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.weight - torch.Size([560]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.depthwise_conv.bn.bias - torch.Size([560]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.conv.weight - torch.Size([512, 560, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.0.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.conv.weight - torch.Size([512, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.depthwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.sep_bottleneck.1.pointwise_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([21, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023-01-20 01:50:45,530 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): _BatchNormXd(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet101_v1c'}
  (decode_head): DepthwiseSeparableASPPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(512, 21, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (image_pool): Sequential(
      (0): AdaptiveAvgPool2d(output_size=1)
      (1): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (aspp_modules): DepthwiseSeparableASPPModule(
      (0): ConvModule(
        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False)
          (bn): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False)
          (bn): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=2048, bias=False)
          (bn): _BatchNormXd(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(2560, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (c1_bottleneck): ConvModule(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): _BatchNormXd(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (sep_bottleneck): Sequential(
      (0): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(560, 560, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=560, bias=False)
          (bn): _BatchNormXd(560, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(560, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): DepthwiseSeparableConvModule(
        (depthwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512, bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
        (pointwise_conv): ConvModule(
          (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-01-20 01:50:45,643 - mmseg - INFO - Loaded 10582 images
2023-01-20 01:50:50,285 - mmseg - INFO - Loaded 1449 images
2023-01-20 01:50:50,285 - mmseg - INFO - Start running, host: ders@ders-SYS-4029GP-TRTC-ZY001, work_dir: /media/ders/mazhiming/mmseg/mmsegmentation/mzmseg/baseline_splgpse
2023-01-20 01:50:50,285 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-01-20 01:50:50,286 - mmseg - INFO - workflow: [('train', 1)], max: 15000 iters
2023-01-20 01:50:50,286 - mmseg - INFO - Checkpoints will be saved to /media/ders/mazhiming/mmseg/mmsegmentation/mzmseg/baseline_splgpse by HardDiskBackend.
2023-01-20 01:51:43,988 - mmseg - INFO - Iter [50/15000]	lr: 9.971e-03, eta: 4:27:06, time: 1.072, data_time: 0.017, memory: 21690, decode.loss_ce: 1.6451, decode.acc_seg: 57.1852, aux.loss_ce: 0.6706, aux.acc_seg: 56.3503, loss: 2.3157
2023-01-20 01:52:33,994 - mmseg - INFO - Iter [100/15000]	lr: 9.941e-03, eta: 4:17:17, time: 1.000, data_time: 0.007, memory: 21690, decode.loss_ce: 1.2649, decode.acc_seg: 65.4741, aux.loss_ce: 0.5408, aux.acc_seg: 61.5446, loss: 1.8057
2023-01-20 01:53:24,202 - mmseg - INFO - Iter [150/15000]	lr: 9.911e-03, eta: 4:13:47, time: 1.004, data_time: 0.007, memory: 21690, decode.loss_ce: 1.2461, decode.acc_seg: 63.8944, aux.loss_ce: 0.5364, aux.acc_seg: 62.3979, loss: 1.7825
2023-01-20 01:54:14,459 - mmseg - INFO - Iter [200/15000]	lr: 9.882e-03, eta: 4:11:41, time: 1.005, data_time: 0.007, memory: 21690, decode.loss_ce: 1.0916, decode.acc_seg: 68.3100, aux.loss_ce: 0.5050, aux.acc_seg: 64.5266, loss: 1.5966
2023-01-20 01:55:04,724 - mmseg - INFO - Iter [250/15000]	lr: 9.852e-03, eta: 4:10:05, time: 1.005, data_time: 0.007, memory: 21690, decode.loss_ce: 0.9636, decode.acc_seg: 69.7677, aux.loss_ce: 0.4620, aux.acc_seg: 67.1302, loss: 1.4256
2023-01-20 01:55:55,042 - mmseg - INFO - Iter [300/15000]	lr: 9.822e-03, eta: 4:08:47, time: 1.006, data_time: 0.007, memory: 21690, decode.loss_ce: 0.9505, decode.acc_seg: 70.5469, aux.loss_ce: 0.4547, aux.acc_seg: 67.2551, loss: 1.4052
2023-01-20 01:56:45,386 - mmseg - INFO - Iter [350/15000]	lr: 9.792e-03, eta: 4:07:39, time: 1.007, data_time: 0.007, memory: 21690, decode.loss_ce: 0.9613, decode.acc_seg: 70.3281, aux.loss_ce: 0.4657, aux.acc_seg: 66.8098, loss: 1.4270
2023-01-20 01:57:35,738 - mmseg - INFO - Iter [400/15000]	lr: 9.763e-03, eta: 4:06:35, time: 1.007, data_time: 0.007, memory: 21690, decode.loss_ce: 0.9728, decode.acc_seg: 70.4839, aux.loss_ce: 0.4659, aux.acc_seg: 66.9241, loss: 1.4387
2023-01-20 01:58:26,176 - mmseg - INFO - Iter [450/15000]	lr: 9.733e-03, eta: 4:05:37, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.9395, decode.acc_seg: 70.2465, aux.loss_ce: 0.4797, aux.acc_seg: 65.7167, loss: 1.4192
2023-01-20 01:59:16,572 - mmseg - INFO - Iter [500/15000]	lr: 9.703e-03, eta: 4:04:39, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.9436, decode.acc_seg: 71.7373, aux.loss_ce: 0.4500, aux.acc_seg: 68.0943, loss: 1.3937
2023-01-20 02:00:07,022 - mmseg - INFO - Iter [550/15000]	lr: 9.673e-03, eta: 4:03:44, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.9001, decode.acc_seg: 71.6151, aux.loss_ce: 0.4474, aux.acc_seg: 67.1425, loss: 1.3475
2023-01-20 02:00:57,501 - mmseg - INFO - Iter [600/15000]	lr: 9.643e-03, eta: 4:02:50, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.8695, decode.acc_seg: 71.6527, aux.loss_ce: 0.4509, aux.acc_seg: 66.5592, loss: 1.3203
2023-01-20 02:01:47,953 - mmseg - INFO - Iter [650/15000]	lr: 9.614e-03, eta: 4:01:56, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.8108, decode.acc_seg: 74.9347, aux.loss_ce: 0.4232, aux.acc_seg: 69.3235, loss: 1.2340
2023-01-20 02:02:38,405 - mmseg - INFO - Iter [700/15000]	lr: 9.584e-03, eta: 4:01:03, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.8149, decode.acc_seg: 74.4849, aux.loss_ce: 0.4090, aux.acc_seg: 69.2127, loss: 1.2239
2023-01-20 02:03:28,877 - mmseg - INFO - Iter [750/15000]	lr: 9.554e-03, eta: 4:00:11, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.7905, decode.acc_seg: 74.4444, aux.loss_ce: 0.4006, aux.acc_seg: 70.0305, loss: 1.1911
2023-01-20 02:04:19,331 - mmseg - INFO - Iter [800/15000]	lr: 9.524e-03, eta: 3:59:18, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.8222, decode.acc_seg: 73.1961, aux.loss_ce: 0.4324, aux.acc_seg: 67.8735, loss: 1.2545
2023-01-20 02:05:09,790 - mmseg - INFO - Iter [850/15000]	lr: 9.494e-03, eta: 3:58:26, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.8032, decode.acc_seg: 73.5867, aux.loss_ce: 0.4208, aux.acc_seg: 68.6924, loss: 1.2240
2023-01-20 02:06:00,239 - mmseg - INFO - Iter [900/15000]	lr: 9.464e-03, eta: 3:57:34, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.7369, decode.acc_seg: 75.7463, aux.loss_ce: 0.3963, aux.acc_seg: 69.5252, loss: 1.1332
2023-01-20 02:06:50,687 - mmseg - INFO - Iter [950/15000]	lr: 9.434e-03, eta: 3:56:42, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.7593, decode.acc_seg: 75.4792, aux.loss_ce: 0.4015, aux.acc_seg: 69.3851, loss: 1.1609
2023-01-20 02:07:41,102 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 02:07:41,102 - mmseg - INFO - Iter [1000/15000]	lr: 9.405e-03, eta: 3:55:49, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.7534, decode.acc_seg: 75.4675, aux.loss_ce: 0.3936, aux.acc_seg: 70.0423, loss: 1.1470
2023-01-20 02:08:31,494 - mmseg - INFO - Iter [1050/15000]	lr: 9.375e-03, eta: 3:54:57, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.7696, decode.acc_seg: 75.0685, aux.loss_ce: 0.3923, aux.acc_seg: 70.2769, loss: 1.1619
2023-01-20 02:09:22,011 - mmseg - INFO - Iter [1100/15000]	lr: 9.345e-03, eta: 3:54:06, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.7776, decode.acc_seg: 74.4300, aux.loss_ce: 0.4009, aux.acc_seg: 70.1600, loss: 1.1785
2023-01-20 02:10:12,483 - mmseg - INFO - Iter [1150/15000]	lr: 9.315e-03, eta: 3:53:15, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.7656, decode.acc_seg: 75.2000, aux.loss_ce: 0.4053, aux.acc_seg: 68.9811, loss: 1.1709
2023-01-20 02:11:03,059 - mmseg - INFO - Iter [1200/15000]	lr: 9.285e-03, eta: 3:52:25, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.7768, decode.acc_seg: 74.7106, aux.loss_ce: 0.3991, aux.acc_seg: 70.0881, loss: 1.1758
2023-01-20 02:11:53,645 - mmseg - INFO - Iter [1250/15000]	lr: 9.255e-03, eta: 3:51:35, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6761, decode.acc_seg: 76.8890, aux.loss_ce: 0.3617, aux.acc_seg: 71.9422, loss: 1.0378
2023-01-20 02:12:44,187 - mmseg - INFO - Iter [1300/15000]	lr: 9.225e-03, eta: 3:50:45, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.8568, decode.acc_seg: 73.5535, aux.loss_ce: 0.4299, aux.acc_seg: 67.6287, loss: 1.2866
2023-01-20 02:13:37,075 - mmseg - INFO - Iter [1350/15000]	lr: 9.195e-03, eta: 3:50:18, time: 1.058, data_time: 0.056, memory: 21690, decode.loss_ce: 0.7163, decode.acc_seg: 76.5659, aux.loss_ce: 0.3777, aux.acc_seg: 71.5536, loss: 1.0940
2023-01-20 02:14:27,572 - mmseg - INFO - Iter [1400/15000]	lr: 9.165e-03, eta: 3:49:26, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6800, decode.acc_seg: 77.1896, aux.loss_ce: 0.3553, aux.acc_seg: 72.6122, loss: 1.0353
2023-01-20 02:15:18,084 - mmseg - INFO - Iter [1450/15000]	lr: 9.135e-03, eta: 3:48:35, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6389, decode.acc_seg: 78.6758, aux.loss_ce: 0.3557, aux.acc_seg: 71.6462, loss: 0.9946
2023-01-20 02:16:08,640 - mmseg - INFO - Iter [1500/15000]	lr: 9.105e-03, eta: 3:47:44, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6913, decode.acc_seg: 76.3580, aux.loss_ce: 0.3819, aux.acc_seg: 70.4989, loss: 1.0732
2023-01-20 02:16:59,130 - mmseg - INFO - Iter [1550/15000]	lr: 9.075e-03, eta: 3:46:52, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.7137, decode.acc_seg: 76.1117, aux.loss_ce: 0.3910, aux.acc_seg: 70.4993, loss: 1.1046
2023-01-20 02:17:49,654 - mmseg - INFO - Iter [1600/15000]	lr: 9.045e-03, eta: 3:46:01, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.7717, decode.acc_seg: 74.0847, aux.loss_ce: 0.4025, aux.acc_seg: 69.4098, loss: 1.1742
2023-01-20 02:18:40,173 - mmseg - INFO - Iter [1650/15000]	lr: 9.015e-03, eta: 3:45:09, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6709, decode.acc_seg: 76.6388, aux.loss_ce: 0.3706, aux.acc_seg: 71.0207, loss: 1.0415
2023-01-20 02:19:30,738 - mmseg - INFO - Iter [1700/15000]	lr: 8.985e-03, eta: 3:44:19, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6464, decode.acc_seg: 78.0335, aux.loss_ce: 0.3718, aux.acc_seg: 70.8517, loss: 1.0182
2023-01-20 02:20:21,225 - mmseg - INFO - Iter [1750/15000]	lr: 8.955e-03, eta: 3:43:27, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.6607, decode.acc_seg: 78.0061, aux.loss_ce: 0.3522, aux.acc_seg: 72.5423, loss: 1.0128
2023-01-20 02:21:11,817 - mmseg - INFO - Iter [1800/15000]	lr: 8.925e-03, eta: 3:42:37, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6397, decode.acc_seg: 79.6284, aux.loss_ce: 0.3461, aux.acc_seg: 74.2197, loss: 0.9857
2023-01-20 02:22:02,343 - mmseg - INFO - Iter [1850/15000]	lr: 8.895e-03, eta: 3:41:45, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6438, decode.acc_seg: 78.5185, aux.loss_ce: 0.3580, aux.acc_seg: 71.9973, loss: 1.0018
2023-01-20 02:22:52,915 - mmseg - INFO - Iter [1900/15000]	lr: 8.864e-03, eta: 3:40:55, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6204, decode.acc_seg: 80.0586, aux.loss_ce: 0.3510, aux.acc_seg: 72.8086, loss: 0.9713
2023-01-20 02:23:43,460 - mmseg - INFO - Iter [1950/15000]	lr: 8.834e-03, eta: 3:40:04, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5622, decode.acc_seg: 80.9214, aux.loss_ce: 0.3180, aux.acc_seg: 75.2483, loss: 0.8802
2023-01-20 02:24:34,060 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 02:24:34,061 - mmseg - INFO - Iter [2000/15000]	lr: 8.804e-03, eta: 3:39:13, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6193, decode.acc_seg: 79.5198, aux.loss_ce: 0.3498, aux.acc_seg: 72.9216, loss: 0.9691
2023-01-20 02:25:24,595 - mmseg - INFO - Iter [2050/15000]	lr: 8.774e-03, eta: 3:38:22, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6355, decode.acc_seg: 79.0071, aux.loss_ce: 0.3651, aux.acc_seg: 71.8408, loss: 1.0006
2023-01-20 02:26:15,199 - mmseg - INFO - Iter [2100/15000]	lr: 8.744e-03, eta: 3:37:32, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6134, decode.acc_seg: 79.5257, aux.loss_ce: 0.3410, aux.acc_seg: 73.5335, loss: 0.9543
2023-01-20 02:27:05,718 - mmseg - INFO - Iter [2150/15000]	lr: 8.714e-03, eta: 3:36:41, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5744, decode.acc_seg: 81.0253, aux.loss_ce: 0.3491, aux.acc_seg: 73.6414, loss: 0.9236
2023-01-20 02:27:56,252 - mmseg - INFO - Iter [2200/15000]	lr: 8.684e-03, eta: 3:35:50, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6098, decode.acc_seg: 79.2072, aux.loss_ce: 0.3277, aux.acc_seg: 73.8679, loss: 0.9375
2023-01-20 02:28:46,774 - mmseg - INFO - Iter [2250/15000]	lr: 8.653e-03, eta: 3:34:59, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6392, decode.acc_seg: 79.5712, aux.loss_ce: 0.3582, aux.acc_seg: 72.7086, loss: 0.9974
2023-01-20 02:29:37,325 - mmseg - INFO - Iter [2300/15000]	lr: 8.623e-03, eta: 3:34:08, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5980, decode.acc_seg: 81.0057, aux.loss_ce: 0.3250, aux.acc_seg: 74.6897, loss: 0.9231
2023-01-20 02:30:27,880 - mmseg - INFO - Iter [2350/15000]	lr: 8.593e-03, eta: 3:33:17, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.5611, decode.acc_seg: 80.0669, aux.loss_ce: 0.3383, aux.acc_seg: 72.6372, loss: 0.8994
2023-01-20 02:31:18,440 - mmseg - INFO - Iter [2400/15000]	lr: 8.563e-03, eta: 3:32:27, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.6485, decode.acc_seg: 78.0755, aux.loss_ce: 0.3559, aux.acc_seg: 72.2503, loss: 1.0045
2023-01-20 02:32:09,055 - mmseg - INFO - Iter [2450/15000]	lr: 8.533e-03, eta: 3:31:36, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6137, decode.acc_seg: 78.8168, aux.loss_ce: 0.3564, aux.acc_seg: 70.5831, loss: 0.9702
2023-01-20 02:32:59,678 - mmseg - INFO - Iter [2500/15000]	lr: 8.502e-03, eta: 3:30:46, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6143, decode.acc_seg: 80.4916, aux.loss_ce: 0.3362, aux.acc_seg: 74.4008, loss: 0.9504
2023-01-20 02:33:50,251 - mmseg - INFO - Iter [2550/15000]	lr: 8.472e-03, eta: 3:29:55, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.6305, decode.acc_seg: 78.8564, aux.loss_ce: 0.3471, aux.acc_seg: 72.4721, loss: 0.9777
2023-01-20 02:34:40,810 - mmseg - INFO - Iter [2600/15000]	lr: 8.442e-03, eta: 3:29:04, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6613, decode.acc_seg: 77.7163, aux.loss_ce: 0.3610, aux.acc_seg: 71.7987, loss: 1.0224
2023-01-20 02:35:33,805 - mmseg - INFO - Iter [2650/15000]	lr: 8.412e-03, eta: 3:28:25, time: 1.060, data_time: 0.057, memory: 21690, decode.loss_ce: 0.6105, decode.acc_seg: 79.2102, aux.loss_ce: 0.3357, aux.acc_seg: 73.3125, loss: 0.9462
2023-01-20 02:36:24,207 - mmseg - INFO - Iter [2700/15000]	lr: 8.381e-03, eta: 3:27:33, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.5831, decode.acc_seg: 80.6822, aux.loss_ce: 0.3335, aux.acc_seg: 74.5175, loss: 0.9167
2023-01-20 02:37:14,723 - mmseg - INFO - Iter [2750/15000]	lr: 8.351e-03, eta: 3:26:42, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5485, decode.acc_seg: 81.5259, aux.loss_ce: 0.3216, aux.acc_seg: 74.3920, loss: 0.8702
2023-01-20 02:38:05,215 - mmseg - INFO - Iter [2800/15000]	lr: 8.321e-03, eta: 3:25:51, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5225, decode.acc_seg: 82.6638, aux.loss_ce: 0.3108, aux.acc_seg: 75.3487, loss: 0.8333
2023-01-20 02:38:55,717 - mmseg - INFO - Iter [2850/15000]	lr: 8.290e-03, eta: 3:25:00, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5821, decode.acc_seg: 80.5176, aux.loss_ce: 0.3334, aux.acc_seg: 74.2191, loss: 0.9155
2023-01-20 02:39:46,190 - mmseg - INFO - Iter [2900/15000]	lr: 8.260e-03, eta: 3:24:09, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.5588, decode.acc_seg: 80.0942, aux.loss_ce: 0.3242, aux.acc_seg: 73.8901, loss: 0.8830
2023-01-20 02:40:36,669 - mmseg - INFO - Iter [2950/15000]	lr: 8.230e-03, eta: 3:23:18, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5212, decode.acc_seg: 81.9915, aux.loss_ce: 0.3222, aux.acc_seg: 73.8075, loss: 0.8434
2023-01-20 02:41:27,153 - mmseg - INFO - Saving checkpoint at 3000 iterations
2023-01-20 02:41:28,718 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 02:41:28,718 - mmseg - INFO - Iter [3000/15000]	lr: 8.199e-03, eta: 3:22:33, time: 1.041, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5640, decode.acc_seg: 80.7116, aux.loss_ce: 0.3355, aux.acc_seg: 72.4764, loss: 0.8995
2023-01-20 02:44:32,849 - mmseg - INFO - per class results:
2023-01-20 02:44:32,851 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 86.19 | 89.92 |
|  aeroplane  | 67.04 | 72.01 |
|   bicycle   | 23.61 | 84.84 |
|     bird    | 55.07 | 66.36 |
|     boat    |  50.7 | 70.46 |
|    bottle   | 45.67 | 67.38 |
|     bus     | 58.97 | 78.35 |
|     car     | 55.19 | 88.42 |
|     cat     | 61.67 | 85.52 |
|    chair    | 19.15 |  31.9 |
|     cow     | 17.89 | 19.39 |
| diningtable | 45.94 | 65.76 |
|     dog     | 56.06 | 74.93 |
|    horse    | 50.16 | 80.83 |
|  motorbike  | 63.64 | 74.05 |
|    person   | 66.92 | 89.11 |
| pottedplant | 22.43 | 68.08 |
|    sheep    | 51.02 | 59.27 |
|     sofa    | 32.63 |  46.4 |
|    train    | 63.23 | 82.99 |
|  tvmonitor  | 39.36 | 71.31 |
+-------------+-------+-------+
2023-01-20 02:44:32,851 - mmseg - INFO - Summary:
2023-01-20 02:44:32,851 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 85.47 | 49.17 | 69.87 |
+-------+-------+-------+
2023-01-20 02:44:32,851 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 02:44:32,851 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.8547, mIoU: 0.4917, mAcc: 0.6987, IoU.background: 0.8619, IoU.aeroplane: 0.6704, IoU.bicycle: 0.2361, IoU.bird: 0.5507, IoU.boat: 0.5070, IoU.bottle: 0.4567, IoU.bus: 0.5897, IoU.car: 0.5519, IoU.cat: 0.6167, IoU.chair: 0.1915, IoU.cow: 0.1789, IoU.diningtable: 0.4594, IoU.dog: 0.5606, IoU.horse: 0.5016, IoU.motorbike: 0.6364, IoU.person: 0.6692, IoU.pottedplant: 0.2243, IoU.sheep: 0.5102, IoU.sofa: 0.3263, IoU.train: 0.6323, IoU.tvmonitor: 0.3936, Acc.background: 0.8992, Acc.aeroplane: 0.7201, Acc.bicycle: 0.8484, Acc.bird: 0.6636, Acc.boat: 0.7046, Acc.bottle: 0.6738, Acc.bus: 0.7835, Acc.car: 0.8842, Acc.cat: 0.8552, Acc.chair: 0.3190, Acc.cow: 0.1939, Acc.diningtable: 0.6576, Acc.dog: 0.7493, Acc.horse: 0.8083, Acc.motorbike: 0.7405, Acc.person: 0.8911, Acc.pottedplant: 0.6808, Acc.sheep: 0.5927, Acc.sofa: 0.4640, Acc.train: 0.8299, Acc.tvmonitor: 0.7131
2023-01-20 02:45:23,526 - mmseg - INFO - Iter [3050/15000]	lr: 8.169e-03, eta: 3:33:44, time: 4.696, data_time: 3.691, memory: 21690, decode.loss_ce: 0.5899, decode.acc_seg: 80.4096, aux.loss_ce: 0.3382, aux.acc_seg: 73.2519, loss: 0.9280
2023-01-20 02:46:14,104 - mmseg - INFO - Iter [3100/15000]	lr: 8.139e-03, eta: 3:32:38, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6056, decode.acc_seg: 80.0512, aux.loss_ce: 0.3419, aux.acc_seg: 73.1064, loss: 0.9475
2023-01-20 02:47:04,677 - mmseg - INFO - Iter [3150/15000]	lr: 8.108e-03, eta: 3:31:33, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5508, decode.acc_seg: 81.1908, aux.loss_ce: 0.3064, aux.acc_seg: 75.8790, loss: 0.8572
2023-01-20 02:47:55,235 - mmseg - INFO - Iter [3200/15000]	lr: 8.078e-03, eta: 3:30:29, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5071, decode.acc_seg: 81.4404, aux.loss_ce: 0.3043, aux.acc_seg: 75.2003, loss: 0.8114
2023-01-20 02:48:45,759 - mmseg - INFO - Iter [3250/15000]	lr: 8.047e-03, eta: 3:29:24, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5472, decode.acc_seg: 81.9742, aux.loss_ce: 0.3130, aux.acc_seg: 75.6225, loss: 0.8603
2023-01-20 02:49:36,254 - mmseg - INFO - Iter [3300/15000]	lr: 8.017e-03, eta: 3:28:20, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5565, decode.acc_seg: 82.2185, aux.loss_ce: 0.3171, aux.acc_seg: 75.1632, loss: 0.8736
2023-01-20 02:50:26,762 - mmseg - INFO - Iter [3350/15000]	lr: 7.986e-03, eta: 3:27:17, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5616, decode.acc_seg: 80.7281, aux.loss_ce: 0.3413, aux.acc_seg: 73.1631, loss: 0.9029
2023-01-20 02:51:17,317 - mmseg - INFO - Iter [3400/15000]	lr: 7.956e-03, eta: 3:26:14, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4761, decode.acc_seg: 84.1638, aux.loss_ce: 0.2899, aux.acc_seg: 76.4947, loss: 0.7661
2023-01-20 02:52:07,867 - mmseg - INFO - Iter [3450/15000]	lr: 7.925e-03, eta: 3:25:11, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4922, decode.acc_seg: 82.7112, aux.loss_ce: 0.3141, aux.acc_seg: 75.0096, loss: 0.8063
2023-01-20 02:52:58,418 - mmseg - INFO - Iter [3500/15000]	lr: 7.895e-03, eta: 3:24:09, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4987, decode.acc_seg: 82.8215, aux.loss_ce: 0.2833, aux.acc_seg: 76.9311, loss: 0.7820
2023-01-20 02:53:49,033 - mmseg - INFO - Iter [3550/15000]	lr: 7.864e-03, eta: 3:23:07, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5472, decode.acc_seg: 81.7902, aux.loss_ce: 0.3146, aux.acc_seg: 74.4955, loss: 0.8617
2023-01-20 02:54:39,582 - mmseg - INFO - Iter [3600/15000]	lr: 7.834e-03, eta: 3:22:05, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.5968, decode.acc_seg: 80.6538, aux.loss_ce: 0.3312, aux.acc_seg: 74.4001, loss: 0.9281
2023-01-20 02:55:30,153 - mmseg - INFO - Iter [3650/15000]	lr: 7.803e-03, eta: 3:21:04, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.6148, decode.acc_seg: 79.5182, aux.loss_ce: 0.3322, aux.acc_seg: 73.9365, loss: 0.9470
2023-01-20 02:56:20,703 - mmseg - INFO - Iter [3700/15000]	lr: 7.773e-03, eta: 3:20:03, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5519, decode.acc_seg: 81.2481, aux.loss_ce: 0.3075, aux.acc_seg: 75.4998, loss: 0.8594
2023-01-20 02:57:11,239 - mmseg - INFO - Iter [3750/15000]	lr: 7.742e-03, eta: 3:19:02, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5657, decode.acc_seg: 81.0685, aux.loss_ce: 0.3282, aux.acc_seg: 73.7530, loss: 0.8938
2023-01-20 02:58:01,771 - mmseg - INFO - Iter [3800/15000]	lr: 7.712e-03, eta: 3:18:01, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5329, decode.acc_seg: 81.5247, aux.loss_ce: 0.3157, aux.acc_seg: 74.7161, loss: 0.8486
2023-01-20 02:58:52,277 - mmseg - INFO - Iter [3850/15000]	lr: 7.681e-03, eta: 3:17:01, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5625, decode.acc_seg: 80.8505, aux.loss_ce: 0.3188, aux.acc_seg: 75.0331, loss: 0.8814
2023-01-20 02:59:42,799 - mmseg - INFO - Iter [3900/15000]	lr: 7.651e-03, eta: 3:16:01, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5097, decode.acc_seg: 82.9528, aux.loss_ce: 0.3046, aux.acc_seg: 75.6947, loss: 0.8144
2023-01-20 03:00:33,317 - mmseg - INFO - Iter [3950/15000]	lr: 7.620e-03, eta: 3:15:01, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4966, decode.acc_seg: 83.6813, aux.loss_ce: 0.3056, aux.acc_seg: 75.4745, loss: 0.8023
2023-01-20 03:01:26,075 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 03:01:26,075 - mmseg - INFO - Iter [4000/15000]	lr: 7.589e-03, eta: 3:14:08, time: 1.055, data_time: 0.055, memory: 21690, decode.loss_ce: 0.5455, decode.acc_seg: 81.8406, aux.loss_ce: 0.3308, aux.acc_seg: 73.8866, loss: 0.8763
2023-01-20 03:02:16,451 - mmseg - INFO - Iter [4050/15000]	lr: 7.559e-03, eta: 3:13:08, time: 1.007, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5377, decode.acc_seg: 81.7235, aux.loss_ce: 0.3047, aux.acc_seg: 76.0456, loss: 0.8425
2023-01-20 03:03:06,973 - mmseg - INFO - Iter [4100/15000]	lr: 7.528e-03, eta: 3:12:08, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4982, decode.acc_seg: 82.6449, aux.loss_ce: 0.3008, aux.acc_seg: 76.1356, loss: 0.7989
2023-01-20 03:03:57,546 - mmseg - INFO - Iter [4150/15000]	lr: 7.497e-03, eta: 3:11:09, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4933, decode.acc_seg: 83.4531, aux.loss_ce: 0.3228, aux.acc_seg: 74.5275, loss: 0.8161
2023-01-20 03:04:48,131 - mmseg - INFO - Iter [4200/15000]	lr: 7.467e-03, eta: 3:10:11, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4443, decode.acc_seg: 84.3322, aux.loss_ce: 0.2710, aux.acc_seg: 78.3446, loss: 0.7153
2023-01-20 03:05:38,713 - mmseg - INFO - Iter [4250/15000]	lr: 7.436e-03, eta: 3:09:12, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5608, decode.acc_seg: 80.8303, aux.loss_ce: 0.3105, aux.acc_seg: 75.4156, loss: 0.8713
2023-01-20 03:06:29,269 - mmseg - INFO - Iter [4300/15000]	lr: 7.405e-03, eta: 3:08:14, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4624, decode.acc_seg: 84.6401, aux.loss_ce: 0.2941, aux.acc_seg: 76.9124, loss: 0.7565
2023-01-20 03:07:19,818 - mmseg - INFO - Iter [4350/15000]	lr: 7.375e-03, eta: 3:07:16, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5564, decode.acc_seg: 81.8180, aux.loss_ce: 0.2983, aux.acc_seg: 76.3896, loss: 0.8546
2023-01-20 03:08:10,353 - mmseg - INFO - Iter [4400/15000]	lr: 7.344e-03, eta: 3:06:18, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5324, decode.acc_seg: 81.2981, aux.loss_ce: 0.3189, aux.acc_seg: 74.3344, loss: 0.8513
2023-01-20 03:09:00,892 - mmseg - INFO - Iter [4450/15000]	lr: 7.313e-03, eta: 3:05:20, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4861, decode.acc_seg: 83.2783, aux.loss_ce: 0.3101, aux.acc_seg: 74.9780, loss: 0.7962
2023-01-20 03:09:51,425 - mmseg - INFO - Iter [4500/15000]	lr: 7.282e-03, eta: 3:04:22, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4318, decode.acc_seg: 84.7718, aux.loss_ce: 0.2947, aux.acc_seg: 76.1477, loss: 0.7265
2023-01-20 03:10:41,988 - mmseg - INFO - Iter [4550/15000]	lr: 7.251e-03, eta: 3:03:24, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5468, decode.acc_seg: 81.0570, aux.loss_ce: 0.3195, aux.acc_seg: 74.2954, loss: 0.8663
2023-01-20 03:11:32,568 - mmseg - INFO - Iter [4600/15000]	lr: 7.221e-03, eta: 3:02:27, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4858, decode.acc_seg: 83.1030, aux.loss_ce: 0.2905, aux.acc_seg: 76.6993, loss: 0.7763
2023-01-20 03:12:23,083 - mmseg - INFO - Iter [4650/15000]	lr: 7.190e-03, eta: 3:01:30, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4410, decode.acc_seg: 84.7324, aux.loss_ce: 0.2814, aux.acc_seg: 77.5645, loss: 0.7224
2023-01-20 03:13:13,623 - mmseg - INFO - Iter [4700/15000]	lr: 7.159e-03, eta: 3:00:32, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4728, decode.acc_seg: 84.0340, aux.loss_ce: 0.2905, aux.acc_seg: 76.9540, loss: 0.7633
2023-01-20 03:14:04,162 - mmseg - INFO - Iter [4750/15000]	lr: 7.128e-03, eta: 2:59:35, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4601, decode.acc_seg: 84.2298, aux.loss_ce: 0.2861, aux.acc_seg: 76.7616, loss: 0.7462
2023-01-20 03:14:54,778 - mmseg - INFO - Iter [4800/15000]	lr: 7.097e-03, eta: 2:58:39, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4981, decode.acc_seg: 83.2069, aux.loss_ce: 0.2963, aux.acc_seg: 76.1905, loss: 0.7944
2023-01-20 03:15:45,369 - mmseg - INFO - Iter [4850/15000]	lr: 7.066e-03, eta: 2:57:42, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4625, decode.acc_seg: 83.9769, aux.loss_ce: 0.3022, aux.acc_seg: 75.8404, loss: 0.7647
2023-01-20 03:16:35,926 - mmseg - INFO - Iter [4900/15000]	lr: 7.036e-03, eta: 2:56:46, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4794, decode.acc_seg: 83.2268, aux.loss_ce: 0.3041, aux.acc_seg: 74.9988, loss: 0.7836
2023-01-20 03:17:26,485 - mmseg - INFO - Iter [4950/15000]	lr: 7.005e-03, eta: 2:55:49, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5111, decode.acc_seg: 82.9634, aux.loss_ce: 0.3110, aux.acc_seg: 74.3423, loss: 0.8221
2023-01-20 03:18:17,021 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 03:18:17,021 - mmseg - INFO - Iter [5000/15000]	lr: 6.974e-03, eta: 2:54:53, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5471, decode.acc_seg: 81.5173, aux.loss_ce: 0.3276, aux.acc_seg: 74.4404, loss: 0.8747
2023-01-20 03:19:07,566 - mmseg - INFO - Iter [5050/15000]	lr: 6.943e-03, eta: 2:53:56, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4825, decode.acc_seg: 83.2452, aux.loss_ce: 0.2910, aux.acc_seg: 76.4635, loss: 0.7735
2023-01-20 03:19:58,112 - mmseg - INFO - Iter [5100/15000]	lr: 6.912e-03, eta: 2:53:00, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4941, decode.acc_seg: 82.8042, aux.loss_ce: 0.2996, aux.acc_seg: 75.8946, loss: 0.7938
2023-01-20 03:20:48,657 - mmseg - INFO - Iter [5150/15000]	lr: 6.881e-03, eta: 2:52:04, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.5303, decode.acc_seg: 82.2868, aux.loss_ce: 0.3181, aux.acc_seg: 74.6964, loss: 0.8484
2023-01-20 03:21:39,159 - mmseg - INFO - Iter [5200/15000]	lr: 6.850e-03, eta: 2:51:08, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4751, decode.acc_seg: 83.5002, aux.loss_ce: 0.3035, aux.acc_seg: 75.4273, loss: 0.7786
2023-01-20 03:22:29,752 - mmseg - INFO - Iter [5250/15000]	lr: 6.819e-03, eta: 2:50:13, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4986, decode.acc_seg: 83.3318, aux.loss_ce: 0.3115, aux.acc_seg: 75.0678, loss: 0.8101
2023-01-20 03:23:22,587 - mmseg - INFO - Iter [5300/15000]	lr: 6.788e-03, eta: 2:49:21, time: 1.057, data_time: 0.054, memory: 21690, decode.loss_ce: 0.3962, decode.acc_seg: 85.8236, aux.loss_ce: 0.2764, aux.acc_seg: 77.3449, loss: 0.6726
2023-01-20 03:24:13,010 - mmseg - INFO - Iter [5350/15000]	lr: 6.757e-03, eta: 2:48:25, time: 1.008, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4509, decode.acc_seg: 84.6715, aux.loss_ce: 0.2708, aux.acc_seg: 78.3165, loss: 0.7217
2023-01-20 03:25:03,548 - mmseg - INFO - Iter [5400/15000]	lr: 6.726e-03, eta: 2:47:29, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4470, decode.acc_seg: 84.0115, aux.loss_ce: 0.2776, aux.acc_seg: 76.9898, loss: 0.7245
2023-01-20 03:25:54,066 - mmseg - INFO - Iter [5450/15000]	lr: 6.695e-03, eta: 2:46:34, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3908, decode.acc_seg: 85.6174, aux.loss_ce: 0.2599, aux.acc_seg: 77.8506, loss: 0.6507
2023-01-20 03:26:44,617 - mmseg - INFO - Iter [5500/15000]	lr: 6.664e-03, eta: 2:45:39, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4133, decode.acc_seg: 85.5280, aux.loss_ce: 0.2887, aux.acc_seg: 76.5252, loss: 0.7020
2023-01-20 03:27:35,224 - mmseg - INFO - Iter [5550/15000]	lr: 6.633e-03, eta: 2:44:43, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4623, decode.acc_seg: 84.5745, aux.loss_ce: 0.2925, aux.acc_seg: 76.7043, loss: 0.7548
2023-01-20 03:28:25,850 - mmseg - INFO - Iter [5600/15000]	lr: 6.601e-03, eta: 2:43:48, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4687, decode.acc_seg: 84.1929, aux.loss_ce: 0.2940, aux.acc_seg: 76.4629, loss: 0.7627
2023-01-20 03:29:16,489 - mmseg - INFO - Iter [5650/15000]	lr: 6.570e-03, eta: 2:42:53, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4721, decode.acc_seg: 84.0158, aux.loss_ce: 0.2925, aux.acc_seg: 75.8039, loss: 0.7646
2023-01-20 03:30:07,091 - mmseg - INFO - Iter [5700/15000]	lr: 6.539e-03, eta: 2:41:58, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4570, decode.acc_seg: 84.7298, aux.loss_ce: 0.2782, aux.acc_seg: 77.7894, loss: 0.7352
2023-01-20 03:30:57,661 - mmseg - INFO - Iter [5750/15000]	lr: 6.508e-03, eta: 2:41:03, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4852, decode.acc_seg: 83.8715, aux.loss_ce: 0.3066, aux.acc_seg: 76.0186, loss: 0.7917
2023-01-20 03:31:48,244 - mmseg - INFO - Iter [5800/15000]	lr: 6.477e-03, eta: 2:40:08, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4782, decode.acc_seg: 82.8281, aux.loss_ce: 0.2955, aux.acc_seg: 75.7881, loss: 0.7737
2023-01-20 03:32:38,766 - mmseg - INFO - Iter [5850/15000]	lr: 6.446e-03, eta: 2:39:14, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4614, decode.acc_seg: 83.9316, aux.loss_ce: 0.2987, aux.acc_seg: 75.5391, loss: 0.7601
2023-01-20 03:33:29,301 - mmseg - INFO - Iter [5900/15000]	lr: 6.414e-03, eta: 2:38:19, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4932, decode.acc_seg: 84.1238, aux.loss_ce: 0.3121, aux.acc_seg: 75.8856, loss: 0.8053
2023-01-20 03:34:19,770 - mmseg - INFO - Iter [5950/15000]	lr: 6.383e-03, eta: 2:37:24, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.5033, decode.acc_seg: 83.3875, aux.loss_ce: 0.3035, aux.acc_seg: 76.3898, loss: 0.8068
2023-01-20 03:35:10,253 - mmseg - INFO - Saving checkpoint at 6000 iterations
2023-01-20 03:35:12,976 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 03:35:12,976 - mmseg - INFO - Iter [6000/15000]	lr: 6.352e-03, eta: 2:36:33, time: 1.064, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4659, decode.acc_seg: 84.5719, aux.loss_ce: 0.2838, aux.acc_seg: 77.3971, loss: 0.7497
2023-01-20 03:37:10,797 - mmseg - INFO - per class results:
2023-01-20 03:37:10,798 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 88.48 | 91.47 |
|  aeroplane  | 81.65 |  92.4 |
|   bicycle   | 28.56 | 82.81 |
|     bird    | 71.65 | 78.44 |
|     boat    | 51.95 | 80.33 |
|    bottle   | 49.45 | 77.09 |
|     bus     | 84.09 | 97.06 |
|     car     | 74.24 | 90.18 |
|     cat     | 57.79 | 62.28 |
|    chair    | 22.06 | 37.36 |
|     cow     | 47.69 | 51.19 |
| diningtable | 47.88 |  65.8 |
|     dog     | 54.96 | 91.41 |
|    horse    | 57.59 | 88.68 |
|  motorbike  | 62.51 | 95.58 |
|    person   | 74.51 | 83.87 |
| pottedplant | 25.88 | 57.39 |
|    sheep    | 53.99 | 80.99 |
|     sofa    | 39.63 | 50.88 |
|    train    | 71.59 | 90.19 |
|  tvmonitor  | 34.46 | 85.19 |
+-------------+-------+-------+
2023-01-20 03:37:10,799 - mmseg - INFO - Summary:
2023-01-20 03:37:10,799 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 88.01 | 56.22 | 77.65 |
+-------+-------+-------+
2023-01-20 03:37:10,799 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 03:37:10,799 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.8801, mIoU: 0.5622, mAcc: 0.7765, IoU.background: 0.8848, IoU.aeroplane: 0.8165, IoU.bicycle: 0.2856, IoU.bird: 0.7165, IoU.boat: 0.5195, IoU.bottle: 0.4945, IoU.bus: 0.8409, IoU.car: 0.7424, IoU.cat: 0.5779, IoU.chair: 0.2206, IoU.cow: 0.4769, IoU.diningtable: 0.4788, IoU.dog: 0.5496, IoU.horse: 0.5759, IoU.motorbike: 0.6251, IoU.person: 0.7451, IoU.pottedplant: 0.2588, IoU.sheep: 0.5399, IoU.sofa: 0.3963, IoU.train: 0.7159, IoU.tvmonitor: 0.3446, Acc.background: 0.9147, Acc.aeroplane: 0.9240, Acc.bicycle: 0.8281, Acc.bird: 0.7844, Acc.boat: 0.8033, Acc.bottle: 0.7709, Acc.bus: 0.9706, Acc.car: 0.9018, Acc.cat: 0.6228, Acc.chair: 0.3736, Acc.cow: 0.5119, Acc.diningtable: 0.6580, Acc.dog: 0.9141, Acc.horse: 0.8868, Acc.motorbike: 0.9558, Acc.person: 0.8387, Acc.pottedplant: 0.5739, Acc.sheep: 0.8099, Acc.sofa: 0.5088, Acc.train: 0.9019, Acc.tvmonitor: 0.8519
2023-01-20 03:38:01,348 - mmseg - INFO - Iter [6050/15000]	lr: 6.321e-03, eta: 2:38:33, time: 3.367, data_time: 2.364, memory: 21690, decode.loss_ce: 0.4526, decode.acc_seg: 84.4044, aux.loss_ce: 0.2834, aux.acc_seg: 77.7823, loss: 0.7361
2023-01-20 03:38:51,932 - mmseg - INFO - Iter [6100/15000]	lr: 6.289e-03, eta: 2:37:36, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4228, decode.acc_seg: 84.9728, aux.loss_ce: 0.2675, aux.acc_seg: 78.1365, loss: 0.6903
2023-01-20 03:39:42,533 - mmseg - INFO - Iter [6150/15000]	lr: 6.258e-03, eta: 2:36:39, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4361, decode.acc_seg: 85.6894, aux.loss_ce: 0.2813, aux.acc_seg: 77.6277, loss: 0.7174
2023-01-20 03:40:33,076 - mmseg - INFO - Iter [6200/15000]	lr: 6.227e-03, eta: 2:35:43, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4290, decode.acc_seg: 84.7302, aux.loss_ce: 0.2739, aux.acc_seg: 77.8542, loss: 0.7030
2023-01-20 03:41:23,622 - mmseg - INFO - Iter [6250/15000]	lr: 6.195e-03, eta: 2:34:46, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4216, decode.acc_seg: 85.4985, aux.loss_ce: 0.2656, aux.acc_seg: 77.9817, loss: 0.6872
2023-01-20 03:42:14,141 - mmseg - INFO - Iter [6300/15000]	lr: 6.164e-03, eta: 2:33:49, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4869, decode.acc_seg: 83.3996, aux.loss_ce: 0.2837, aux.acc_seg: 77.0171, loss: 0.7706
2023-01-20 03:43:04,716 - mmseg - INFO - Iter [6350/15000]	lr: 6.133e-03, eta: 2:32:53, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4076, decode.acc_seg: 84.8799, aux.loss_ce: 0.2562, aux.acc_seg: 78.2466, loss: 0.6638
2023-01-20 03:43:55,250 - mmseg - INFO - Iter [6400/15000]	lr: 6.101e-03, eta: 2:31:57, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4388, decode.acc_seg: 84.7279, aux.loss_ce: 0.2738, aux.acc_seg: 77.6709, loss: 0.7126
2023-01-20 03:44:45,766 - mmseg - INFO - Iter [6450/15000]	lr: 6.070e-03, eta: 2:31:00, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4325, decode.acc_seg: 85.1271, aux.loss_ce: 0.2897, aux.acc_seg: 76.5511, loss: 0.7222
2023-01-20 03:45:36,307 - mmseg - INFO - Iter [6500/15000]	lr: 6.038e-03, eta: 2:30:04, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4241, decode.acc_seg: 84.9671, aux.loss_ce: 0.2690, aux.acc_seg: 78.7062, loss: 0.6932
2023-01-20 03:46:26,927 - mmseg - INFO - Iter [6550/15000]	lr: 6.007e-03, eta: 2:29:08, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4344, decode.acc_seg: 84.6777, aux.loss_ce: 0.2898, aux.acc_seg: 76.1247, loss: 0.7242
2023-01-20 03:47:17,509 - mmseg - INFO - Iter [6600/15000]	lr: 5.976e-03, eta: 2:28:12, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4036, decode.acc_seg: 86.0468, aux.loss_ce: 0.2521, aux.acc_seg: 79.5174, loss: 0.6556
2023-01-20 03:48:10,260 - mmseg - INFO - Iter [6650/15000]	lr: 5.944e-03, eta: 2:27:19, time: 1.055, data_time: 0.054, memory: 21690, decode.loss_ce: 0.3895, decode.acc_seg: 86.3399, aux.loss_ce: 0.2773, aux.acc_seg: 77.8747, loss: 0.6668
2023-01-20 03:49:00,892 - mmseg - INFO - Iter [6700/15000]	lr: 5.913e-03, eta: 2:26:23, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4265, decode.acc_seg: 85.1432, aux.loss_ce: 0.2749, aux.acc_seg: 77.8160, loss: 0.7014
2023-01-20 03:49:51,442 - mmseg - INFO - Iter [6750/15000]	lr: 5.881e-03, eta: 2:25:27, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4011, decode.acc_seg: 85.5235, aux.loss_ce: 0.2678, aux.acc_seg: 77.9258, loss: 0.6689
2023-01-20 03:50:42,016 - mmseg - INFO - Iter [6800/15000]	lr: 5.850e-03, eta: 2:24:32, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4288, decode.acc_seg: 85.1309, aux.loss_ce: 0.2671, aux.acc_seg: 78.0592, loss: 0.6959
2023-01-20 03:51:32,619 - mmseg - INFO - Iter [6850/15000]	lr: 5.818e-03, eta: 2:23:36, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4449, decode.acc_seg: 85.1148, aux.loss_ce: 0.2776, aux.acc_seg: 77.7207, loss: 0.7225
2023-01-20 03:52:23,243 - mmseg - INFO - Iter [6900/15000]	lr: 5.786e-03, eta: 2:22:41, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3709, decode.acc_seg: 86.6323, aux.loss_ce: 0.2534, aux.acc_seg: 78.7893, loss: 0.6243
2023-01-20 03:53:13,855 - mmseg - INFO - Iter [6950/15000]	lr: 5.755e-03, eta: 2:21:45, time: 1.012, data_time: 0.007, memory: 21690, decode.loss_ce: 0.4037, decode.acc_seg: 86.0964, aux.loss_ce: 0.2590, aux.acc_seg: 79.4099, loss: 0.6626
2023-01-20 03:54:04,477 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 03:54:04,477 - mmseg - INFO - Iter [7000/15000]	lr: 5.723e-03, eta: 2:20:50, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4473, decode.acc_seg: 85.4211, aux.loss_ce: 0.2876, aux.acc_seg: 77.8996, loss: 0.7349
2023-01-20 03:54:55,123 - mmseg - INFO - Iter [7050/15000]	lr: 5.692e-03, eta: 2:19:55, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4497, decode.acc_seg: 84.4135, aux.loss_ce: 0.2725, aux.acc_seg: 78.3545, loss: 0.7222
2023-01-20 03:55:45,752 - mmseg - INFO - Iter [7100/15000]	lr: 5.660e-03, eta: 2:18:59, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4475, decode.acc_seg: 85.1127, aux.loss_ce: 0.2837, aux.acc_seg: 77.4957, loss: 0.7312
2023-01-20 03:56:36,279 - mmseg - INFO - Iter [7150/15000]	lr: 5.628e-03, eta: 2:18:04, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4139, decode.acc_seg: 86.2063, aux.loss_ce: 0.2791, aux.acc_seg: 77.6971, loss: 0.6930
2023-01-20 03:57:26,817 - mmseg - INFO - Iter [7200/15000]	lr: 5.597e-03, eta: 2:17:09, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4196, decode.acc_seg: 86.0406, aux.loss_ce: 0.2637, aux.acc_seg: 78.5340, loss: 0.6833
2023-01-20 03:58:17,326 - mmseg - INFO - Iter [7250/15000]	lr: 5.565e-03, eta: 2:16:14, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3849, decode.acc_seg: 86.3690, aux.loss_ce: 0.2617, aux.acc_seg: 78.6962, loss: 0.6466
2023-01-20 03:59:07,832 - mmseg - INFO - Iter [7300/15000]	lr: 5.533e-03, eta: 2:15:19, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4379, decode.acc_seg: 84.9387, aux.loss_ce: 0.2836, aux.acc_seg: 77.1575, loss: 0.7216
2023-01-20 03:59:58,342 - mmseg - INFO - Iter [7350/15000]	lr: 5.501e-03, eta: 2:14:24, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4491, decode.acc_seg: 84.9666, aux.loss_ce: 0.2987, aux.acc_seg: 76.1020, loss: 0.7478
2023-01-20 04:00:48,868 - mmseg - INFO - Iter [7400/15000]	lr: 5.470e-03, eta: 2:13:29, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4201, decode.acc_seg: 85.1314, aux.loss_ce: 0.2909, aux.acc_seg: 76.8368, loss: 0.7110
2023-01-20 04:01:39,373 - mmseg - INFO - Iter [7450/15000]	lr: 5.438e-03, eta: 2:12:34, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3812, decode.acc_seg: 87.2784, aux.loss_ce: 0.2599, aux.acc_seg: 79.9157, loss: 0.6411
2023-01-20 04:02:29,801 - mmseg - INFO - Iter [7500/15000]	lr: 5.406e-03, eta: 2:11:39, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3676, decode.acc_seg: 86.2765, aux.loss_ce: 0.2558, aux.acc_seg: 79.2753, loss: 0.6234
2023-01-20 04:03:20,250 - mmseg - INFO - Iter [7550/15000]	lr: 5.374e-03, eta: 2:10:44, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4287, decode.acc_seg: 85.8696, aux.loss_ce: 0.2619, aux.acc_seg: 79.0066, loss: 0.6906
2023-01-20 04:04:10,751 - mmseg - INFO - Iter [7600/15000]	lr: 5.342e-03, eta: 2:09:49, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4403, decode.acc_seg: 84.9928, aux.loss_ce: 0.2802, aux.acc_seg: 77.6480, loss: 0.7205
2023-01-20 04:05:01,304 - mmseg - INFO - Iter [7650/15000]	lr: 5.310e-03, eta: 2:08:55, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3781, decode.acc_seg: 86.9559, aux.loss_ce: 0.2696, aux.acc_seg: 77.8610, loss: 0.6477
2023-01-20 04:05:51,881 - mmseg - INFO - Iter [7700/15000]	lr: 5.278e-03, eta: 2:08:00, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3725, decode.acc_seg: 86.0478, aux.loss_ce: 0.2548, aux.acc_seg: 79.0228, loss: 0.6273
2023-01-20 04:06:42,473 - mmseg - INFO - Iter [7750/15000]	lr: 5.246e-03, eta: 2:07:06, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3966, decode.acc_seg: 86.2216, aux.loss_ce: 0.2632, aux.acc_seg: 78.5990, loss: 0.6599
2023-01-20 04:07:33,060 - mmseg - INFO - Iter [7800/15000]	lr: 5.215e-03, eta: 2:06:11, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3596, decode.acc_seg: 87.1020, aux.loss_ce: 0.2519, aux.acc_seg: 79.2009, loss: 0.6115
2023-01-20 04:08:23,639 - mmseg - INFO - Iter [7850/15000]	lr: 5.183e-03, eta: 2:05:17, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3877, decode.acc_seg: 87.2328, aux.loss_ce: 0.2550, aux.acc_seg: 78.5640, loss: 0.6427
2023-01-20 04:09:14,225 - mmseg - INFO - Iter [7900/15000]	lr: 5.151e-03, eta: 2:04:22, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.4186, decode.acc_seg: 85.8302, aux.loss_ce: 0.2832, aux.acc_seg: 77.4374, loss: 0.7018
2023-01-20 04:10:07,072 - mmseg - INFO - Iter [7950/15000]	lr: 5.119e-03, eta: 2:03:30, time: 1.057, data_time: 0.054, memory: 21690, decode.loss_ce: 0.3988, decode.acc_seg: 85.5779, aux.loss_ce: 0.2510, aux.acc_seg: 79.6620, loss: 0.6498
2023-01-20 04:10:57,570 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 04:10:57,570 - mmseg - INFO - Iter [8000/15000]	lr: 5.087e-03, eta: 2:02:36, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3523, decode.acc_seg: 87.2203, aux.loss_ce: 0.2470, aux.acc_seg: 80.3841, loss: 0.5993
2023-01-20 04:11:48,065 - mmseg - INFO - Iter [8050/15000]	lr: 5.054e-03, eta: 2:01:41, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3695, decode.acc_seg: 86.4196, aux.loss_ce: 0.2628, aux.acc_seg: 78.2061, loss: 0.6324
2023-01-20 04:12:38,611 - mmseg - INFO - Iter [8100/15000]	lr: 5.022e-03, eta: 2:00:47, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3416, decode.acc_seg: 87.6370, aux.loss_ce: 0.2358, aux.acc_seg: 80.7247, loss: 0.5773
2023-01-20 04:13:29,214 - mmseg - INFO - Iter [8150/15000]	lr: 4.990e-03, eta: 1:59:53, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3638, decode.acc_seg: 87.4464, aux.loss_ce: 0.2413, aux.acc_seg: 80.1758, loss: 0.6051
2023-01-20 04:14:19,787 - mmseg - INFO - Iter [8200/15000]	lr: 4.958e-03, eta: 1:58:59, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3415, decode.acc_seg: 88.2862, aux.loss_ce: 0.2402, aux.acc_seg: 80.3303, loss: 0.5817
2023-01-20 04:15:10,353 - mmseg - INFO - Iter [8250/15000]	lr: 4.926e-03, eta: 1:58:05, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3284, decode.acc_seg: 88.0238, aux.loss_ce: 0.2388, aux.acc_seg: 80.4529, loss: 0.5672
2023-01-20 04:16:00,959 - mmseg - INFO - Iter [8300/15000]	lr: 4.894e-03, eta: 1:57:11, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3161, decode.acc_seg: 88.7516, aux.loss_ce: 0.2561, aux.acc_seg: 79.0594, loss: 0.5722
2023-01-20 04:16:51,534 - mmseg - INFO - Iter [8350/15000]	lr: 4.862e-03, eta: 1:56:17, time: 1.012, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3657, decode.acc_seg: 87.9041, aux.loss_ce: 0.2487, aux.acc_seg: 80.3116, loss: 0.6144
2023-01-20 04:17:42,142 - mmseg - INFO - Iter [8400/15000]	lr: 4.829e-03, eta: 1:55:23, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3883, decode.acc_seg: 86.2253, aux.loss_ce: 0.2685, aux.acc_seg: 78.1791, loss: 0.6568
2023-01-20 04:18:32,704 - mmseg - INFO - Iter [8450/15000]	lr: 4.797e-03, eta: 1:54:29, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3767, decode.acc_seg: 87.6059, aux.loss_ce: 0.2495, aux.acc_seg: 80.1227, loss: 0.6262
2023-01-20 04:19:23,275 - mmseg - INFO - Iter [8500/15000]	lr: 4.765e-03, eta: 1:53:35, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3761, decode.acc_seg: 86.9739, aux.loss_ce: 0.2617, aux.acc_seg: 78.8611, loss: 0.6378
2023-01-20 04:20:13,827 - mmseg - INFO - Iter [8550/15000]	lr: 4.733e-03, eta: 1:52:41, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3578, decode.acc_seg: 87.2283, aux.loss_ce: 0.2458, aux.acc_seg: 79.5348, loss: 0.6035
2023-01-20 04:21:04,370 - mmseg - INFO - Iter [8600/15000]	lr: 4.700e-03, eta: 1:51:48, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3463, decode.acc_seg: 87.5216, aux.loss_ce: 0.2526, aux.acc_seg: 79.4416, loss: 0.5988
2023-01-20 04:21:54,981 - mmseg - INFO - Iter [8650/15000]	lr: 4.668e-03, eta: 1:50:54, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3429, decode.acc_seg: 87.8939, aux.loss_ce: 0.2475, aux.acc_seg: 80.5437, loss: 0.5905
2023-01-20 04:22:45,525 - mmseg - INFO - Iter [8700/15000]	lr: 4.635e-03, eta: 1:50:00, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3878, decode.acc_seg: 86.1307, aux.loss_ce: 0.2643, aux.acc_seg: 78.5747, loss: 0.6521
2023-01-20 04:23:36,157 - mmseg - INFO - Iter [8750/15000]	lr: 4.603e-03, eta: 1:49:06, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3842, decode.acc_seg: 86.4223, aux.loss_ce: 0.2525, aux.acc_seg: 79.7858, loss: 0.6367
2023-01-20 04:24:26,784 - mmseg - INFO - Iter [8800/15000]	lr: 4.571e-03, eta: 1:48:13, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3660, decode.acc_seg: 86.9104, aux.loss_ce: 0.2514, aux.acc_seg: 79.4534, loss: 0.6174
2023-01-20 04:25:17,434 - mmseg - INFO - Iter [8850/15000]	lr: 4.538e-03, eta: 1:47:19, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3417, decode.acc_seg: 88.2278, aux.loss_ce: 0.2405, aux.acc_seg: 80.5079, loss: 0.5821
2023-01-20 04:26:08,084 - mmseg - INFO - Iter [8900/15000]	lr: 4.506e-03, eta: 1:46:26, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3325, decode.acc_seg: 88.2502, aux.loss_ce: 0.2497, aux.acc_seg: 79.5258, loss: 0.5822
2023-01-20 04:26:58,720 - mmseg - INFO - Iter [8950/15000]	lr: 4.473e-03, eta: 1:45:32, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3855, decode.acc_seg: 86.4014, aux.loss_ce: 0.2513, aux.acc_seg: 79.7415, loss: 0.6368
2023-01-20 04:27:49,338 - mmseg - INFO - Saving checkpoint at 9000 iterations
2023-01-20 04:27:50,687 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 04:27:50,687 - mmseg - INFO - Iter [9000/15000]	lr: 4.441e-03, eta: 1:44:40, time: 1.039, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3359, decode.acc_seg: 88.1076, aux.loss_ce: 0.2298, aux.acc_seg: 81.5531, loss: 0.5657
2023-01-20 04:29:47,196 - mmseg - INFO - per class results:
2023-01-20 04:29:47,198 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 89.67 |  92.9 |
|  aeroplane  | 83.54 | 89.81 |
|   bicycle   |  33.4 | 85.78 |
|     bird    | 71.57 | 90.91 |
|     boat    | 67.37 | 82.97 |
|    bottle   |  60.0 | 86.57 |
|     bus     | 80.01 | 82.38 |
|     car     | 65.34 | 91.25 |
|     cat     | 71.64 | 93.98 |
|    chair    | 26.22 | 35.69 |
|     cow     | 75.94 | 91.21 |
| diningtable | 33.84 | 35.13 |
|     dog     | 59.69 | 73.09 |
|    horse    | 67.45 | 76.44 |
|  motorbike  | 67.73 | 90.53 |
|    person   | 77.73 | 89.05 |
| pottedplant | 28.46 | 80.34 |
|    sheep    | 73.41 |  88.0 |
|     sofa    | 42.01 | 54.38 |
|    train    | 74.49 |  92.7 |
|  tvmonitor  | 46.03 | 86.94 |
+-------------+-------+-------+
2023-01-20 04:29:47,198 - mmseg - INFO - Summary:
2023-01-20 04:29:47,198 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 89.84 | 61.69 | 80.48 |
+-------+-------+-------+
2023-01-20 04:29:47,198 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 04:29:47,199 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.8984, mIoU: 0.6169, mAcc: 0.8048, IoU.background: 0.8967, IoU.aeroplane: 0.8354, IoU.bicycle: 0.3340, IoU.bird: 0.7157, IoU.boat: 0.6737, IoU.bottle: 0.6000, IoU.bus: 0.8001, IoU.car: 0.6534, IoU.cat: 0.7164, IoU.chair: 0.2622, IoU.cow: 0.7594, IoU.diningtable: 0.3384, IoU.dog: 0.5969, IoU.horse: 0.6745, IoU.motorbike: 0.6773, IoU.person: 0.7773, IoU.pottedplant: 0.2846, IoU.sheep: 0.7341, IoU.sofa: 0.4201, IoU.train: 0.7449, IoU.tvmonitor: 0.4603, Acc.background: 0.9290, Acc.aeroplane: 0.8981, Acc.bicycle: 0.8578, Acc.bird: 0.9091, Acc.boat: 0.8297, Acc.bottle: 0.8657, Acc.bus: 0.8238, Acc.car: 0.9125, Acc.cat: 0.9398, Acc.chair: 0.3569, Acc.cow: 0.9121, Acc.diningtable: 0.3513, Acc.dog: 0.7309, Acc.horse: 0.7644, Acc.motorbike: 0.9053, Acc.person: 0.8905, Acc.pottedplant: 0.8034, Acc.sheep: 0.8800, Acc.sofa: 0.5438, Acc.train: 0.9270, Acc.tvmonitor: 0.8694
2023-01-20 04:30:37,732 - mmseg - INFO - Iter [9050/15000]	lr: 4.408e-03, eta: 1:45:03, time: 3.341, data_time: 2.338, memory: 21690, decode.loss_ce: 0.3769, decode.acc_seg: 86.5513, aux.loss_ce: 0.2470, aux.acc_seg: 79.8328, loss: 0.6238
2023-01-20 04:31:28,260 - mmseg - INFO - Iter [9100/15000]	lr: 4.375e-03, eta: 1:44:08, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3806, decode.acc_seg: 86.7770, aux.loss_ce: 0.2512, aux.acc_seg: 79.6257, loss: 0.6318
2023-01-20 04:32:18,826 - mmseg - INFO - Iter [9150/15000]	lr: 4.343e-03, eta: 1:43:14, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3863, decode.acc_seg: 87.1151, aux.loss_ce: 0.2609, aux.acc_seg: 79.3680, loss: 0.6472
2023-01-20 04:33:09,396 - mmseg - INFO - Iter [9200/15000]	lr: 4.310e-03, eta: 1:42:19, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3182, decode.acc_seg: 88.5825, aux.loss_ce: 0.2284, aux.acc_seg: 81.5505, loss: 0.5466
2023-01-20 04:33:59,966 - mmseg - INFO - Iter [9250/15000]	lr: 4.278e-03, eta: 1:41:25, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3360, decode.acc_seg: 88.4245, aux.loss_ce: 0.2289, aux.acc_seg: 81.5821, loss: 0.5649
2023-01-20 04:34:52,852 - mmseg - INFO - Iter [9300/15000]	lr: 4.245e-03, eta: 1:40:32, time: 1.058, data_time: 0.054, memory: 21690, decode.loss_ce: 0.3350, decode.acc_seg: 88.4433, aux.loss_ce: 0.2270, aux.acc_seg: 81.3472, loss: 0.5620
2023-01-20 04:35:43,403 - mmseg - INFO - Iter [9350/15000]	lr: 4.212e-03, eta: 1:39:38, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3628, decode.acc_seg: 86.6638, aux.loss_ce: 0.2610, aux.acc_seg: 78.7587, loss: 0.6238
2023-01-20 04:36:34,007 - mmseg - INFO - Iter [9400/15000]	lr: 4.179e-03, eta: 1:38:43, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3164, decode.acc_seg: 88.5977, aux.loss_ce: 0.2318, aux.acc_seg: 81.2065, loss: 0.5482
2023-01-20 04:37:24,586 - mmseg - INFO - Iter [9450/15000]	lr: 4.147e-03, eta: 1:37:49, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3073, decode.acc_seg: 89.0621, aux.loss_ce: 0.2231, aux.acc_seg: 82.3033, loss: 0.5304
2023-01-20 04:38:15,101 - mmseg - INFO - Iter [9500/15000]	lr: 4.114e-03, eta: 1:36:55, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3618, decode.acc_seg: 87.4182, aux.loss_ce: 0.2401, aux.acc_seg: 81.0017, loss: 0.6019
2023-01-20 04:39:05,636 - mmseg - INFO - Iter [9550/15000]	lr: 4.081e-03, eta: 1:36:01, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3490, decode.acc_seg: 88.6359, aux.loss_ce: 0.2549, aux.acc_seg: 80.3425, loss: 0.6039
2023-01-20 04:39:56,141 - mmseg - INFO - Iter [9600/15000]	lr: 4.048e-03, eta: 1:35:06, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3104, decode.acc_seg: 88.8304, aux.loss_ce: 0.2299, aux.acc_seg: 81.4370, loss: 0.5404
2023-01-20 04:40:46,637 - mmseg - INFO - Iter [9650/15000]	lr: 4.015e-03, eta: 1:34:12, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3254, decode.acc_seg: 88.4800, aux.loss_ce: 0.2362, aux.acc_seg: 81.3385, loss: 0.5616
2023-01-20 04:41:37,149 - mmseg - INFO - Iter [9700/15000]	lr: 3.982e-03, eta: 1:33:18, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3293, decode.acc_seg: 88.0841, aux.loss_ce: 0.2377, aux.acc_seg: 81.0667, loss: 0.5671
2023-01-20 04:42:27,743 - mmseg - INFO - Iter [9750/15000]	lr: 3.949e-03, eta: 1:32:24, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3237, decode.acc_seg: 88.3042, aux.loss_ce: 0.2355, aux.acc_seg: 80.8880, loss: 0.5592
2023-01-20 04:43:18,234 - mmseg - INFO - Iter [9800/15000]	lr: 3.916e-03, eta: 1:31:30, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3406, decode.acc_seg: 88.0875, aux.loss_ce: 0.2336, aux.acc_seg: 80.9225, loss: 0.5742
2023-01-20 04:44:08,779 - mmseg - INFO - Iter [9850/15000]	lr: 3.883e-03, eta: 1:30:36, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2985, decode.acc_seg: 89.2709, aux.loss_ce: 0.2202, aux.acc_seg: 82.0204, loss: 0.5187
2023-01-20 04:44:59,396 - mmseg - INFO - Iter [9900/15000]	lr: 3.850e-03, eta: 1:29:42, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3179, decode.acc_seg: 89.3625, aux.loss_ce: 0.2286, aux.acc_seg: 82.0872, loss: 0.5464
2023-01-20 04:45:49,948 - mmseg - INFO - Iter [9950/15000]	lr: 3.817e-03, eta: 1:28:48, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3158, decode.acc_seg: 88.8735, aux.loss_ce: 0.2236, aux.acc_seg: 81.3028, loss: 0.5393
2023-01-20 04:46:40,564 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 04:46:40,564 - mmseg - INFO - Iter [10000/15000]	lr: 3.784e-03, eta: 1:27:55, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3238, decode.acc_seg: 88.0741, aux.loss_ce: 0.2315, aux.acc_seg: 80.5942, loss: 0.5553
2023-01-20 04:47:31,136 - mmseg - INFO - Iter [10050/15000]	lr: 3.751e-03, eta: 1:27:01, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2915, decode.acc_seg: 89.7592, aux.loss_ce: 0.2131, aux.acc_seg: 82.8783, loss: 0.5046
2023-01-20 04:48:21,773 - mmseg - INFO - Iter [10100/15000]	lr: 3.718e-03, eta: 1:26:07, time: 1.013, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3155, decode.acc_seg: 88.9006, aux.loss_ce: 0.2277, aux.acc_seg: 81.6702, loss: 0.5432
2023-01-20 04:49:12,322 - mmseg - INFO - Iter [10150/15000]	lr: 3.684e-03, eta: 1:25:13, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2727, decode.acc_seg: 89.7519, aux.loss_ce: 0.2071, aux.acc_seg: 82.7606, loss: 0.4799
2023-01-20 04:50:02,848 - mmseg - INFO - Iter [10200/15000]	lr: 3.651e-03, eta: 1:24:19, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3308, decode.acc_seg: 88.0977, aux.loss_ce: 0.2521, aux.acc_seg: 79.8529, loss: 0.5828
2023-01-20 04:50:53,369 - mmseg - INFO - Iter [10250/15000]	lr: 3.618e-03, eta: 1:23:26, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3429, decode.acc_seg: 88.3249, aux.loss_ce: 0.2309, aux.acc_seg: 81.5312, loss: 0.5738
2023-01-20 04:51:43,873 - mmseg - INFO - Iter [10300/15000]	lr: 3.584e-03, eta: 1:22:32, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3089, decode.acc_seg: 88.8210, aux.loss_ce: 0.2363, aux.acc_seg: 80.4644, loss: 0.5452
2023-01-20 04:52:34,432 - mmseg - INFO - Iter [10350/15000]	lr: 3.551e-03, eta: 1:21:38, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3158, decode.acc_seg: 88.4857, aux.loss_ce: 0.2348, aux.acc_seg: 80.3117, loss: 0.5506
2023-01-20 04:53:24,960 - mmseg - INFO - Iter [10400/15000]	lr: 3.518e-03, eta: 1:20:45, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3414, decode.acc_seg: 87.8836, aux.loss_ce: 0.2348, aux.acc_seg: 81.4340, loss: 0.5762
2023-01-20 04:54:15,538 - mmseg - INFO - Iter [10450/15000]	lr: 3.484e-03, eta: 1:19:51, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3279, decode.acc_seg: 88.2481, aux.loss_ce: 0.2226, aux.acc_seg: 81.3516, loss: 0.5505
2023-01-20 04:55:06,107 - mmseg - INFO - Iter [10500/15000]	lr: 3.451e-03, eta: 1:18:58, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3367, decode.acc_seg: 87.6606, aux.loss_ce: 0.2312, aux.acc_seg: 81.2534, loss: 0.5679
2023-01-20 04:55:56,697 - mmseg - INFO - Iter [10550/15000]	lr: 3.417e-03, eta: 1:18:04, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3031, decode.acc_seg: 89.2407, aux.loss_ce: 0.2217, aux.acc_seg: 82.3405, loss: 0.5248
2023-01-20 04:56:49,661 - mmseg - INFO - Iter [10600/15000]	lr: 3.384e-03, eta: 1:17:12, time: 1.059, data_time: 0.056, memory: 21690, decode.loss_ce: 0.2923, decode.acc_seg: 89.7399, aux.loss_ce: 0.2162, aux.acc_seg: 82.4483, loss: 0.5085
2023-01-20 04:57:40,235 - mmseg - INFO - Iter [10650/15000]	lr: 3.350e-03, eta: 1:16:18, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3093, decode.acc_seg: 88.8711, aux.loss_ce: 0.2353, aux.acc_seg: 80.7685, loss: 0.5446
2023-01-20 04:58:30,762 - mmseg - INFO - Iter [10700/15000]	lr: 3.316e-03, eta: 1:15:25, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3134, decode.acc_seg: 88.7377, aux.loss_ce: 0.2257, aux.acc_seg: 81.8682, loss: 0.5390
2023-01-20 04:59:21,356 - mmseg - INFO - Iter [10750/15000]	lr: 3.283e-03, eta: 1:14:31, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3115, decode.acc_seg: 89.6538, aux.loss_ce: 0.2353, aux.acc_seg: 81.4727, loss: 0.5468
2023-01-20 05:00:11,919 - mmseg - INFO - Iter [10800/15000]	lr: 3.249e-03, eta: 1:13:38, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2954, decode.acc_seg: 88.9708, aux.loss_ce: 0.2240, aux.acc_seg: 81.6821, loss: 0.5194
2023-01-20 05:01:02,458 - mmseg - INFO - Iter [10850/15000]	lr: 3.215e-03, eta: 1:12:44, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2935, decode.acc_seg: 89.5554, aux.loss_ce: 0.2143, aux.acc_seg: 82.1659, loss: 0.5078
2023-01-20 05:01:53,020 - mmseg - INFO - Iter [10900/15000]	lr: 3.181e-03, eta: 1:11:51, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.3173, decode.acc_seg: 88.1931, aux.loss_ce: 0.2221, aux.acc_seg: 81.7954, loss: 0.5395
2023-01-20 05:02:43,495 - mmseg - INFO - Iter [10950/15000]	lr: 3.148e-03, eta: 1:10:58, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2876, decode.acc_seg: 89.9182, aux.loss_ce: 0.2222, aux.acc_seg: 81.9741, loss: 0.5098
2023-01-20 05:03:33,958 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 05:03:33,959 - mmseg - INFO - Iter [11000/15000]	lr: 3.114e-03, eta: 1:10:04, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3043, decode.acc_seg: 89.6843, aux.loss_ce: 0.2157, aux.acc_seg: 82.4877, loss: 0.5200
2023-01-20 05:04:24,454 - mmseg - INFO - Iter [11050/15000]	lr: 3.080e-03, eta: 1:09:11, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2866, decode.acc_seg: 89.6346, aux.loss_ce: 0.2199, aux.acc_seg: 81.7317, loss: 0.5065
2023-01-20 05:05:14,926 - mmseg - INFO - Iter [11100/15000]	lr: 3.046e-03, eta: 1:08:18, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2932, decode.acc_seg: 89.8742, aux.loss_ce: 0.2237, aux.acc_seg: 82.2473, loss: 0.5169
2023-01-20 05:06:05,409 - mmseg - INFO - Iter [11150/15000]	lr: 3.012e-03, eta: 1:07:25, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2889, decode.acc_seg: 89.8812, aux.loss_ce: 0.2182, aux.acc_seg: 82.7077, loss: 0.5071
2023-01-20 05:06:55,921 - mmseg - INFO - Iter [11200/15000]	lr: 2.978e-03, eta: 1:06:31, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2689, decode.acc_seg: 90.3919, aux.loss_ce: 0.2047, aux.acc_seg: 83.2196, loss: 0.4737
2023-01-20 05:07:46,437 - mmseg - INFO - Iter [11250/15000]	lr: 2.944e-03, eta: 1:05:38, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2820, decode.acc_seg: 90.2615, aux.loss_ce: 0.2006, aux.acc_seg: 83.8616, loss: 0.4826
2023-01-20 05:08:36,990 - mmseg - INFO - Iter [11300/15000]	lr: 2.910e-03, eta: 1:04:45, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2625, decode.acc_seg: 90.6028, aux.loss_ce: 0.2022, aux.acc_seg: 83.4952, loss: 0.4647
2023-01-20 05:09:27,457 - mmseg - INFO - Iter [11350/15000]	lr: 2.875e-03, eta: 1:03:52, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2915, decode.acc_seg: 89.5358, aux.loss_ce: 0.2226, aux.acc_seg: 82.1612, loss: 0.5142
2023-01-20 05:10:17,898 - mmseg - INFO - Iter [11400/15000]	lr: 2.841e-03, eta: 1:02:59, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2981, decode.acc_seg: 89.8853, aux.loss_ce: 0.2297, aux.acc_seg: 81.3635, loss: 0.5278
2023-01-20 05:11:08,336 - mmseg - INFO - Iter [11450/15000]	lr: 2.807e-03, eta: 1:02:06, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2661, decode.acc_seg: 90.4833, aux.loss_ce: 0.2014, aux.acc_seg: 83.7505, loss: 0.4675
2023-01-20 05:11:58,788 - mmseg - INFO - Iter [11500/15000]	lr: 2.773e-03, eta: 1:01:12, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3186, decode.acc_seg: 88.5962, aux.loss_ce: 0.2133, aux.acc_seg: 82.9516, loss: 0.5318
2023-01-20 05:12:49,263 - mmseg - INFO - Iter [11550/15000]	lr: 2.738e-03, eta: 1:00:19, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3288, decode.acc_seg: 88.4784, aux.loss_ce: 0.2311, aux.acc_seg: 81.0573, loss: 0.5598
2023-01-20 05:13:39,747 - mmseg - INFO - Iter [11600/15000]	lr: 2.704e-03, eta: 0:59:26, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3018, decode.acc_seg: 89.2986, aux.loss_ce: 0.2108, aux.acc_seg: 82.7389, loss: 0.5126
2023-01-20 05:14:30,300 - mmseg - INFO - Iter [11650/15000]	lr: 2.669e-03, eta: 0:58:33, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3016, decode.acc_seg: 89.3544, aux.loss_ce: 0.2278, aux.acc_seg: 81.3767, loss: 0.5293
2023-01-20 05:15:20,890 - mmseg - INFO - Iter [11700/15000]	lr: 2.635e-03, eta: 0:57:40, time: 1.012, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2901, decode.acc_seg: 90.1618, aux.loss_ce: 0.2095, aux.acc_seg: 83.1088, loss: 0.4996
2023-01-20 05:16:11,419 - mmseg - INFO - Iter [11750/15000]	lr: 2.600e-03, eta: 0:56:47, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2510, decode.acc_seg: 90.7456, aux.loss_ce: 0.1924, aux.acc_seg: 84.6337, loss: 0.4434
2023-01-20 05:17:02,008 - mmseg - INFO - Iter [11800/15000]	lr: 2.566e-03, eta: 0:55:54, time: 1.012, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2875, decode.acc_seg: 89.0279, aux.loss_ce: 0.2075, aux.acc_seg: 82.9831, loss: 0.4950
2023-01-20 05:17:52,540 - mmseg - INFO - Iter [11850/15000]	lr: 2.531e-03, eta: 0:55:02, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2688, decode.acc_seg: 90.3791, aux.loss_ce: 0.2050, aux.acc_seg: 83.1703, loss: 0.4738
2023-01-20 05:18:45,400 - mmseg - INFO - Iter [11900/15000]	lr: 2.496e-03, eta: 0:54:09, time: 1.057, data_time: 0.054, memory: 21690, decode.loss_ce: 0.2275, decode.acc_seg: 91.8696, aux.loss_ce: 0.1908, aux.acc_seg: 84.6795, loss: 0.4183
2023-01-20 05:19:35,869 - mmseg - INFO - Iter [11950/15000]	lr: 2.461e-03, eta: 0:53:16, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2981, decode.acc_seg: 88.9651, aux.loss_ce: 0.2148, aux.acc_seg: 82.6072, loss: 0.5129
2023-01-20 05:20:26,368 - mmseg - INFO - Saving checkpoint at 12000 iterations
2023-01-20 05:20:27,608 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 05:20:27,608 - mmseg - INFO - Iter [12000/15000]	lr: 2.426e-03, eta: 0:52:24, time: 1.035, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2798, decode.acc_seg: 90.0341, aux.loss_ce: 0.2112, aux.acc_seg: 82.6697, loss: 0.4909
2023-01-20 05:22:21,954 - mmseg - INFO - per class results:
2023-01-20 05:22:21,955 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 91.44 | 94.61 |
|  aeroplane  | 86.18 | 92.98 |
|   bicycle   | 37.38 | 87.16 |
|     bird    |  77.7 | 88.45 |
|     boat    | 66.19 | 80.63 |
|    bottle   | 62.96 | 85.76 |
|     bus     | 89.86 | 97.95 |
|     car     |  77.3 | 91.88 |
|     cat     | 86.03 | 95.95 |
|    chair    | 26.99 | 40.41 |
|     cow     | 72.17 | 91.14 |
| diningtable | 45.83 |  49.8 |
|     dog     |  79.8 | 88.52 |
|    horse    |  73.3 | 87.65 |
|  motorbike  | 75.26 | 87.43 |
|    person   | 80.67 | 89.58 |
| pottedplant | 42.43 | 78.12 |
|    sheep    | 75.69 | 85.88 |
|     sofa    | 45.72 | 58.25 |
|    train    | 83.47 | 92.96 |
|  tvmonitor  | 49.41 |  84.1 |
+-------------+-------+-------+
2023-01-20 05:22:21,956 - mmseg - INFO - Summary:
2023-01-20 05:22:21,956 - mmseg - INFO - 
+-------+-------+------+
|  aAcc |  mIoU | mAcc |
+-------+-------+------+
| 92.07 | 67.89 | 83.3 |
+-------+-------+------+
2023-01-20 05:22:21,956 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 05:22:21,956 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.9207, mIoU: 0.6789, mAcc: 0.8330, IoU.background: 0.9144, IoU.aeroplane: 0.8618, IoU.bicycle: 0.3738, IoU.bird: 0.7770, IoU.boat: 0.6619, IoU.bottle: 0.6296, IoU.bus: 0.8986, IoU.car: 0.7730, IoU.cat: 0.8603, IoU.chair: 0.2699, IoU.cow: 0.7217, IoU.diningtable: 0.4583, IoU.dog: 0.7980, IoU.horse: 0.7330, IoU.motorbike: 0.7526, IoU.person: 0.8067, IoU.pottedplant: 0.4243, IoU.sheep: 0.7569, IoU.sofa: 0.4572, IoU.train: 0.8347, IoU.tvmonitor: 0.4941, Acc.background: 0.9461, Acc.aeroplane: 0.9298, Acc.bicycle: 0.8716, Acc.bird: 0.8845, Acc.boat: 0.8063, Acc.bottle: 0.8576, Acc.bus: 0.9795, Acc.car: 0.9188, Acc.cat: 0.9595, Acc.chair: 0.4041, Acc.cow: 0.9114, Acc.diningtable: 0.4980, Acc.dog: 0.8852, Acc.horse: 0.8765, Acc.motorbike: 0.8743, Acc.person: 0.8958, Acc.pottedplant: 0.7812, Acc.sheep: 0.8588, Acc.sofa: 0.5825, Acc.train: 0.9296, Acc.tvmonitor: 0.8410
2023-01-20 05:23:12,429 - mmseg - INFO - Iter [12050/15000]	lr: 2.392e-03, eta: 0:51:59, time: 3.296, data_time: 2.294, memory: 21690, decode.loss_ce: 0.2814, decode.acc_seg: 89.7582, aux.loss_ce: 0.2039, aux.acc_seg: 83.7006, loss: 0.4853
2023-01-20 05:24:02,952 - mmseg - INFO - Iter [12100/15000]	lr: 2.357e-03, eta: 0:51:05, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2591, decode.acc_seg: 90.6314, aux.loss_ce: 0.2076, aux.acc_seg: 83.0723, loss: 0.4667
2023-01-20 05:24:53,480 - mmseg - INFO - Iter [12150/15000]	lr: 2.322e-03, eta: 0:50:12, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2604, decode.acc_seg: 90.3410, aux.loss_ce: 0.1961, aux.acc_seg: 83.8440, loss: 0.4566
2023-01-20 05:25:43,991 - mmseg - INFO - Iter [12200/15000]	lr: 2.286e-03, eta: 0:49:19, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2706, decode.acc_seg: 90.1428, aux.loss_ce: 0.1987, aux.acc_seg: 83.2884, loss: 0.4692
2023-01-20 05:26:34,472 - mmseg - INFO - Iter [12250/15000]	lr: 2.251e-03, eta: 0:48:25, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2680, decode.acc_seg: 90.5148, aux.loss_ce: 0.2118, aux.acc_seg: 82.9404, loss: 0.4798
2023-01-20 05:27:24,991 - mmseg - INFO - Iter [12300/15000]	lr: 2.216e-03, eta: 0:47:32, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2705, decode.acc_seg: 90.5238, aux.loss_ce: 0.2095, aux.acc_seg: 82.8321, loss: 0.4800
2023-01-20 05:28:15,438 - mmseg - INFO - Iter [12350/15000]	lr: 2.181e-03, eta: 0:46:39, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2836, decode.acc_seg: 89.8085, aux.loss_ce: 0.2152, aux.acc_seg: 82.5177, loss: 0.4988
2023-01-20 05:29:05,868 - mmseg - INFO - Iter [12400/15000]	lr: 2.145e-03, eta: 0:45:45, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2737, decode.acc_seg: 90.0409, aux.loss_ce: 0.2074, aux.acc_seg: 82.9544, loss: 0.4811
2023-01-20 05:29:56,309 - mmseg - INFO - Iter [12450/15000]	lr: 2.110e-03, eta: 0:44:52, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2755, decode.acc_seg: 90.0686, aux.loss_ce: 0.1970, aux.acc_seg: 83.8538, loss: 0.4726
2023-01-20 05:30:46,804 - mmseg - INFO - Iter [12500/15000]	lr: 2.074e-03, eta: 0:43:59, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.3001, decode.acc_seg: 89.0085, aux.loss_ce: 0.2147, aux.acc_seg: 82.3793, loss: 0.5148
2023-01-20 05:31:37,342 - mmseg - INFO - Iter [12550/15000]	lr: 2.039e-03, eta: 0:43:06, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2694, decode.acc_seg: 90.9589, aux.loss_ce: 0.2070, aux.acc_seg: 83.4226, loss: 0.4764
2023-01-20 05:32:27,737 - mmseg - INFO - Iter [12600/15000]	lr: 2.003e-03, eta: 0:42:12, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2492, decode.acc_seg: 90.8024, aux.loss_ce: 0.1953, aux.acc_seg: 83.7952, loss: 0.4445
2023-01-20 05:33:18,205 - mmseg - INFO - Iter [12650/15000]	lr: 1.968e-03, eta: 0:41:19, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2414, decode.acc_seg: 91.0971, aux.loss_ce: 0.1970, aux.acc_seg: 83.4945, loss: 0.4384
2023-01-20 05:34:08,730 - mmseg - INFO - Iter [12700/15000]	lr: 1.932e-03, eta: 0:40:26, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2695, decode.acc_seg: 90.7104, aux.loss_ce: 0.1997, aux.acc_seg: 84.4481, loss: 0.4693
2023-01-20 05:34:59,266 - mmseg - INFO - Iter [12750/15000]	lr: 1.896e-03, eta: 0:39:33, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2862, decode.acc_seg: 89.4350, aux.loss_ce: 0.2111, aux.acc_seg: 82.7492, loss: 0.4973
2023-01-20 05:35:49,783 - mmseg - INFO - Iter [12800/15000]	lr: 1.860e-03, eta: 0:38:40, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2348, decode.acc_seg: 91.8225, aux.loss_ce: 0.1965, aux.acc_seg: 84.5008, loss: 0.4313
2023-01-20 05:36:40,272 - mmseg - INFO - Iter [12850/15000]	lr: 1.824e-03, eta: 0:37:47, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2575, decode.acc_seg: 90.8273, aux.loss_ce: 0.1923, aux.acc_seg: 84.3582, loss: 0.4498
2023-01-20 05:37:30,766 - mmseg - INFO - Iter [12900/15000]	lr: 1.788e-03, eta: 0:36:53, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2805, decode.acc_seg: 90.1330, aux.loss_ce: 0.2176, aux.acc_seg: 82.4377, loss: 0.4981
2023-01-20 05:38:21,210 - mmseg - INFO - Iter [12950/15000]	lr: 1.752e-03, eta: 0:36:00, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2506, decode.acc_seg: 91.2012, aux.loss_ce: 0.2088, aux.acc_seg: 83.3695, loss: 0.4595
2023-01-20 05:39:11,658 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 05:39:11,659 - mmseg - INFO - Iter [13000/15000]	lr: 1.715e-03, eta: 0:35:07, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2461, decode.acc_seg: 91.5392, aux.loss_ce: 0.1827, aux.acc_seg: 85.0374, loss: 0.4288
2023-01-20 05:40:02,047 - mmseg - INFO - Iter [13050/15000]	lr: 1.679e-03, eta: 0:34:14, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2198, decode.acc_seg: 91.9082, aux.loss_ce: 0.1864, aux.acc_seg: 84.5248, loss: 0.4062
2023-01-20 05:40:52,480 - mmseg - INFO - Iter [13100/15000]	lr: 1.643e-03, eta: 0:33:21, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2585, decode.acc_seg: 90.6205, aux.loss_ce: 0.1894, aux.acc_seg: 84.7271, loss: 0.4479
2023-01-20 05:41:43,015 - mmseg - INFO - Iter [13150/15000]	lr: 1.606e-03, eta: 0:32:28, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2534, decode.acc_seg: 91.0302, aux.loss_ce: 0.1847, aux.acc_seg: 84.6910, loss: 0.4380
2023-01-20 05:42:33,502 - mmseg - INFO - Iter [13200/15000]	lr: 1.569e-03, eta: 0:31:35, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2368, decode.acc_seg: 91.4280, aux.loss_ce: 0.1822, aux.acc_seg: 84.9596, loss: 0.4190
2023-01-20 05:43:26,341 - mmseg - INFO - Iter [13250/15000]	lr: 1.533e-03, eta: 0:30:43, time: 1.057, data_time: 0.054, memory: 21690, decode.loss_ce: 0.2161, decode.acc_seg: 92.2754, aux.loss_ce: 0.1731, aux.acc_seg: 86.2868, loss: 0.3892
2023-01-20 05:44:16,874 - mmseg - INFO - Iter [13300/15000]	lr: 1.496e-03, eta: 0:29:50, time: 1.011, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2330, decode.acc_seg: 91.3314, aux.loss_ce: 0.1818, aux.acc_seg: 84.6300, loss: 0.4148
2023-01-20 05:45:07,409 - mmseg - INFO - Iter [13350/15000]	lr: 1.459e-03, eta: 0:28:57, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2095, decode.acc_seg: 92.6551, aux.loss_ce: 0.1658, aux.acc_seg: 86.7959, loss: 0.3753
2023-01-20 05:45:57,905 - mmseg - INFO - Iter [13400/15000]	lr: 1.422e-03, eta: 0:28:04, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2104, decode.acc_seg: 92.2558, aux.loss_ce: 0.1630, aux.acc_seg: 86.4134, loss: 0.3734
2023-01-20 05:46:48,398 - mmseg - INFO - Iter [13450/15000]	lr: 1.384e-03, eta: 0:27:11, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2124, decode.acc_seg: 92.1035, aux.loss_ce: 0.1749, aux.acc_seg: 86.0423, loss: 0.3873
2023-01-20 05:47:38,863 - mmseg - INFO - Iter [13500/15000]	lr: 1.347e-03, eta: 0:26:18, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2451, decode.acc_seg: 91.0701, aux.loss_ce: 0.1872, aux.acc_seg: 84.8665, loss: 0.4323
2023-01-20 05:48:29,315 - mmseg - INFO - Iter [13550/15000]	lr: 1.310e-03, eta: 0:25:25, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2630, decode.acc_seg: 90.3789, aux.loss_ce: 0.1970, aux.acc_seg: 83.8437, loss: 0.4600
2023-01-20 05:49:19,787 - mmseg - INFO - Iter [13600/15000]	lr: 1.272e-03, eta: 0:24:33, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2293, decode.acc_seg: 91.4068, aux.loss_ce: 0.1796, aux.acc_seg: 85.1108, loss: 0.4089
2023-01-20 05:50:10,206 - mmseg - INFO - Iter [13650/15000]	lr: 1.234e-03, eta: 0:23:40, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2485, decode.acc_seg: 91.0670, aux.loss_ce: 0.1908, aux.acc_seg: 84.6069, loss: 0.4393
2023-01-20 05:51:00,618 - mmseg - INFO - Iter [13700/15000]	lr: 1.196e-03, eta: 0:22:47, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2280, decode.acc_seg: 91.6732, aux.loss_ce: 0.1779, aux.acc_seg: 85.4529, loss: 0.4058
2023-01-20 05:51:51,042 - mmseg - INFO - Iter [13750/15000]	lr: 1.158e-03, eta: 0:21:54, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2193, decode.acc_seg: 91.9614, aux.loss_ce: 0.1918, aux.acc_seg: 84.4117, loss: 0.4112
2023-01-20 05:52:41,440 - mmseg - INFO - Iter [13800/15000]	lr: 1.120e-03, eta: 0:21:01, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2354, decode.acc_seg: 91.7935, aux.loss_ce: 0.1829, aux.acc_seg: 85.1629, loss: 0.4183
2023-01-20 05:53:31,850 - mmseg - INFO - Iter [13850/15000]	lr: 1.082e-03, eta: 0:20:09, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2454, decode.acc_seg: 91.0426, aux.loss_ce: 0.1770, aux.acc_seg: 85.3843, loss: 0.4224
2023-01-20 05:54:22,291 - mmseg - INFO - Iter [13900/15000]	lr: 1.044e-03, eta: 0:19:16, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2471, decode.acc_seg: 91.0936, aux.loss_ce: 0.1848, aux.acc_seg: 84.3535, loss: 0.4319
2023-01-20 05:55:12,702 - mmseg - INFO - Iter [13950/15000]	lr: 1.005e-03, eta: 0:18:23, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2418, decode.acc_seg: 91.3728, aux.loss_ce: 0.1893, aux.acc_seg: 84.7273, loss: 0.4312
2023-01-20 05:56:03,074 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 05:56:03,075 - mmseg - INFO - Iter [14000/15000]	lr: 9.661e-04, eta: 0:17:30, time: 1.007, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2091, decode.acc_seg: 92.4685, aux.loss_ce: 0.1652, aux.acc_seg: 86.6070, loss: 0.3743
2023-01-20 05:56:53,438 - mmseg - INFO - Iter [14050/15000]	lr: 9.270e-04, eta: 0:16:38, time: 1.007, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2296, decode.acc_seg: 91.7372, aux.loss_ce: 0.1809, aux.acc_seg: 85.3767, loss: 0.4104
2023-01-20 05:57:43,875 - mmseg - INFO - Iter [14100/15000]	lr: 8.878e-04, eta: 0:15:45, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2376, decode.acc_seg: 91.7668, aux.loss_ce: 0.1807, aux.acc_seg: 85.5575, loss: 0.4183
2023-01-20 05:58:34,313 - mmseg - INFO - Iter [14150/15000]	lr: 8.483e-04, eta: 0:14:52, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2174, decode.acc_seg: 91.7787, aux.loss_ce: 0.1712, aux.acc_seg: 85.8700, loss: 0.3886
2023-01-20 05:59:24,846 - mmseg - INFO - Iter [14200/15000]	lr: 8.086e-04, eta: 0:14:00, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2038, decode.acc_seg: 92.4378, aux.loss_ce: 0.1680, aux.acc_seg: 86.4938, loss: 0.3718
2023-01-20 06:00:15,428 - mmseg - INFO - Iter [14250/15000]	lr: 7.687e-04, eta: 0:13:07, time: 1.012, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2527, decode.acc_seg: 91.2321, aux.loss_ce: 0.1918, aux.acc_seg: 84.6188, loss: 0.4445
2023-01-20 06:01:05,916 - mmseg - INFO - Iter [14300/15000]	lr: 7.285e-04, eta: 0:12:15, time: 1.010, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2152, decode.acc_seg: 92.1289, aux.loss_ce: 0.1737, aux.acc_seg: 85.8446, loss: 0.3889
2023-01-20 06:01:56,377 - mmseg - INFO - Iter [14350/15000]	lr: 6.880e-04, eta: 0:11:22, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2181, decode.acc_seg: 92.2524, aux.loss_ce: 0.1915, aux.acc_seg: 84.4624, loss: 0.4096
2023-01-20 06:02:46,840 - mmseg - INFO - Iter [14400/15000]	lr: 6.472e-04, eta: 0:10:29, time: 1.009, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2252, decode.acc_seg: 92.2826, aux.loss_ce: 0.1751, aux.acc_seg: 85.9771, loss: 0.4003
2023-01-20 06:03:37,250 - mmseg - INFO - Iter [14450/15000]	lr: 6.060e-04, eta: 0:09:37, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2475, decode.acc_seg: 91.8219, aux.loss_ce: 0.1896, aux.acc_seg: 84.9899, loss: 0.4371
2023-01-20 06:04:27,631 - mmseg - INFO - Iter [14500/15000]	lr: 5.645e-04, eta: 0:08:44, time: 1.008, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2269, decode.acc_seg: 91.6343, aux.loss_ce: 0.1770, aux.acc_seg: 85.7373, loss: 0.4039
2023-01-20 06:05:20,437 - mmseg - INFO - Iter [14550/15000]	lr: 5.226e-04, eta: 0:07:52, time: 1.056, data_time: 0.056, memory: 21690, decode.loss_ce: 0.2109, decode.acc_seg: 92.1912, aux.loss_ce: 0.1762, aux.acc_seg: 85.8091, loss: 0.3870
2023-01-20 06:06:10,864 - mmseg - INFO - Iter [14600/15000]	lr: 4.802e-04, eta: 0:06:59, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2364, decode.acc_seg: 91.5109, aux.loss_ce: 0.1956, aux.acc_seg: 84.3245, loss: 0.4320
2023-01-20 06:07:01,481 - mmseg - INFO - Iter [14650/15000]	lr: 4.372e-04, eta: 0:06:07, time: 1.012, data_time: 0.008, memory: 21690, decode.loss_ce: 0.2020, decode.acc_seg: 92.9576, aux.loss_ce: 0.1708, aux.acc_seg: 86.4542, loss: 0.3727
2023-01-20 06:07:52,034 - mmseg - INFO - Iter [14700/15000]	lr: 3.937e-04, eta: 0:05:14, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2207, decode.acc_seg: 91.8973, aux.loss_ce: 0.1768, aux.acc_seg: 85.6166, loss: 0.3975
2023-01-20 06:08:42,564 - mmseg - INFO - Iter [14750/15000]	lr: 3.494e-04, eta: 0:04:22, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2161, decode.acc_seg: 91.8898, aux.loss_ce: 0.1679, aux.acc_seg: 86.2937, loss: 0.3840
2023-01-20 06:09:33,155 - mmseg - INFO - Iter [14800/15000]	lr: 3.042e-04, eta: 0:03:29, time: 1.012, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2240, decode.acc_seg: 91.8777, aux.loss_ce: 0.1790, aux.acc_seg: 85.1925, loss: 0.4030
2023-01-20 06:10:23,708 - mmseg - INFO - Iter [14850/15000]	lr: 2.578e-04, eta: 0:02:37, time: 1.011, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2089, decode.acc_seg: 92.6830, aux.loss_ce: 0.1680, aux.acc_seg: 86.0691, loss: 0.3769
2023-01-20 06:11:14,223 - mmseg - INFO - Iter [14900/15000]	lr: 2.099e-04, eta: 0:01:44, time: 1.010, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2153, decode.acc_seg: 92.2430, aux.loss_ce: 0.1742, aux.acc_seg: 85.6007, loss: 0.3895
2023-01-20 06:12:04,695 - mmseg - INFO - Iter [14950/15000]	lr: 1.594e-04, eta: 0:00:52, time: 1.009, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2382, decode.acc_seg: 91.2961, aux.loss_ce: 0.1975, aux.acc_seg: 84.1393, loss: 0.4358
2023-01-20 06:12:55,134 - mmseg - INFO - Saving checkpoint at 15000 iterations
2023-01-20 06:12:56,379 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 06:12:56,379 - mmseg - INFO - Iter [15000/15000]	lr: 1.017e-04, eta: 0:00:00, time: 1.034, data_time: 0.007, memory: 21690, decode.loss_ce: 0.2023, decode.acc_seg: 92.5800, aux.loss_ce: 0.1611, aux.acc_seg: 86.6441, loss: 0.3634
2023-01-20 06:14:49,784 - mmseg - INFO - per class results:
2023-01-20 06:14:49,785 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 91.58 | 94.58 |
|  aeroplane  | 85.81 | 93.02 |
|   bicycle   | 38.28 | 86.89 |
|     bird    | 83.83 | 93.17 |
|     boat    | 70.98 |  85.8 |
|    bottle   | 62.18 | 92.87 |
|     bus     | 91.06 | 96.34 |
|     car     | 76.62 | 92.94 |
|     cat     | 89.23 | 95.54 |
|    chair    | 28.07 | 42.43 |
|     cow     | 82.73 | 88.38 |
| diningtable | 42.82 | 46.01 |
|     dog     | 83.35 | 94.22 |
|    horse    | 80.37 | 92.93 |
|  motorbike  | 77.84 | 93.34 |
|    person   | 81.44 |  91.9 |
| pottedplant | 39.77 | 79.42 |
|    sheep    | 77.71 | 88.65 |
|     sofa    | 47.83 | 56.15 |
|    train    | 86.67 | 93.89 |
|  tvmonitor  | 51.73 | 87.72 |
+-------------+-------+-------+
2023-01-20 06:14:49,785 - mmseg - INFO - Summary:
2023-01-20 06:14:49,786 - mmseg - INFO - 
+-------+------+-------+
|  aAcc | mIoU |  mAcc |
+-------+------+-------+
| 92.49 | 70.0 | 85.06 |
+-------+------+-------+
2023-01-20 06:14:49,786 - mmseg - INFO - Exp name: my_deeplab.py
2023-01-20 06:14:49,786 - mmseg - INFO - Iter(val) [1449]	aAcc: 0.9249, mIoU: 0.7000, mAcc: 0.8506, IoU.background: 0.9158, IoU.aeroplane: 0.8581, IoU.bicycle: 0.3828, IoU.bird: 0.8383, IoU.boat: 0.7098, IoU.bottle: 0.6218, IoU.bus: 0.9106, IoU.car: 0.7662, IoU.cat: 0.8923, IoU.chair: 0.2807, IoU.cow: 0.8273, IoU.diningtable: 0.4282, IoU.dog: 0.8335, IoU.horse: 0.8037, IoU.motorbike: 0.7784, IoU.person: 0.8144, IoU.pottedplant: 0.3977, IoU.sheep: 0.7771, IoU.sofa: 0.4783, IoU.train: 0.8667, IoU.tvmonitor: 0.5173, Acc.background: 0.9458, Acc.aeroplane: 0.9302, Acc.bicycle: 0.8689, Acc.bird: 0.9317, Acc.boat: 0.8580, Acc.bottle: 0.9287, Acc.bus: 0.9634, Acc.car: 0.9294, Acc.cat: 0.9554, Acc.chair: 0.4243, Acc.cow: 0.8838, Acc.diningtable: 0.4601, Acc.dog: 0.9422, Acc.horse: 0.9293, Acc.motorbike: 0.9334, Acc.person: 0.9190, Acc.pottedplant: 0.7942, Acc.sheep: 0.8865, Acc.sofa: 0.5615, Acc.train: 0.9389, Acc.tvmonitor: 0.8772
